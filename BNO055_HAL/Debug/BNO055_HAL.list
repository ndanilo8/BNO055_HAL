
BNO055_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009120  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080092b8  080092b8  000192b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009318  08009318  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009318  08009318  00019318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009320  08009320  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009324  08009324  00019324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d0c  200000fc  08009424  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e08  08009424  00021e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000179c4  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003621  00000000  00000000  00037b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  0003b158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fff  00000000  00000000  0003c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006c01  00000000  00000000  0003d5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a684  00000000  00000000  000441e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093d2a  00000000  00000000  0005e86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000575c  00000000  00000000  000f2598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000f7cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080092a0 	.word	0x080092a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	080092a0 	.word	0x080092a0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fad2 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f80c 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8ee 	bl	80006c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8c2 	bl	800066c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004e8:	f000 f86e 	bl	80005c8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f008 f9c2 	bl	8008874 <MX_USB_DEVICE_Init>
  MX_TIM11_Init();
 80004f0:	f000 f898 	bl	8000624 <MX_TIM11_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x20>
	...

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f008 fe9e 	bl	8009248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <SystemClock_Config+0xc8>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a26      	ldr	r2, [pc, #152]	; (80005c0 <SystemClock_Config+0xc8>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <SystemClock_Config+0xc8>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <SystemClock_Config+0xcc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <SystemClock_Config+0xcc>)
 8000542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <SystemClock_Config+0xcc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000554:	2301      	movs	r3, #1
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000558:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000568:	2304      	movs	r3, #4
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800056c:	23a8      	movs	r3, #168	; 0xa8
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000570:	2304      	movs	r3, #4
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000574:	2307      	movs	r3, #7
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f003 fd7f 	bl	8004080 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000588:	f000 f910 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2302      	movs	r3, #2
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2102      	movs	r1, #2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 ffe1 	bl	8004570 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005b4:	f000 f8fa 	bl	80007ac <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3750      	adds	r7, #80	; 0x50
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <MX_I2C1_Init+0x54>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_I2C1_Init+0x50>)
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_I2C1_Init+0x58>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_I2C1_Init+0x50>)
 8000606:	f000 fdd5 	bl	80011b4 <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 f8cc 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000118 	.word	0x20000118
 800061c:	40005400 	.word	0x40005400
 8000620:	000186a0 	.word	0x000186a0

08000624 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_TIM11_Init+0x40>)
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <MX_TIM11_Init+0x44>)
 800062c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-2;
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_TIM11_Init+0x40>)
 8000630:	2252      	movs	r2, #82	; 0x52
 8000632:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_TIM11_Init+0x40>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535-2;
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_TIM11_Init+0x40>)
 800063c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000640:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_TIM11_Init+0x40>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_TIM11_Init+0x40>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_TIM11_Init+0x40>)
 8000650:	f004 f9ae 	bl	80049b0 <HAL_TIM_Base_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800065a:	f000 f8a7 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000016c 	.word	0x2000016c
 8000668:	40014800 	.word	0x40014800

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_USART2_UART_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f004 fa54 	bl	8004b50 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ae:	f000 f87d 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200001b4 	.word	0x200001b4
 80006bc:	40004400 	.word	0x40004400

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <MX_GPIO_Init+0xe0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a30      	ldr	r2, [pc, #192]	; (80007a0 <MX_GPIO_Init+0xe0>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <MX_GPIO_Init+0xe0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <MX_GPIO_Init+0xe0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a29      	ldr	r2, [pc, #164]	; (80007a0 <MX_GPIO_Init+0xe0>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <MX_GPIO_Init+0xe0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <MX_GPIO_Init+0xe0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <MX_GPIO_Init+0xe0>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <MX_GPIO_Init+0xe0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_GPIO_Init+0xe0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <MX_GPIO_Init+0xe0>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_GPIO_Init+0xe0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	4816      	ldr	r0, [pc, #88]	; (80007a4 <MX_GPIO_Init+0xe4>)
 800074c:	f000 fcf4 	bl	8001138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000756:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <MX_GPIO_Init+0xe8>)
 8000768:	f000 fb62 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800076c:	2320      	movs	r3, #32
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <MX_GPIO_Init+0xe4>)
 8000784:	f000 fb54 	bl	8000e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2100      	movs	r1, #0
 800078c:	2028      	movs	r0, #40	; 0x28
 800078e:	f000 fae8 	bl	8000d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000792:	2028      	movs	r0, #40	; 0x28
 8000794:	f000 fb01 	bl	8000d9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	bf00      	nop
 800079a:	3728      	adds	r7, #40	; 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020000 	.word	0x40020000
 80007a8:	40020800 	.word	0x40020800

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <HAL_MspInit+0x4c>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x4c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007f6:	2007      	movs	r0, #7
 80007f8:	f000 faa8 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a1d      	ldr	r2, [pc, #116]	; (800089c <HAL_I2C_MspInit+0x94>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d133      	bne.n	8000892 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_I2C_MspInit+0x98>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <HAL_I2C_MspInit+0x98>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_I2C_MspInit+0x98>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000846:	23c0      	movs	r3, #192	; 0xc0
 8000848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084a:	2312      	movs	r3, #18
 800084c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000856:	2304      	movs	r3, #4
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4810      	ldr	r0, [pc, #64]	; (80008a4 <HAL_I2C_MspInit+0x9c>)
 8000862:	f000 fae5 	bl	8000e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_I2C_MspInit+0x98>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <HAL_I2C_MspInit+0x98>)
 8000870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_I2C_MspInit+0x98>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	201f      	movs	r0, #31
 8000888:	f000 fa6b 	bl	8000d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800088c:	201f      	movs	r0, #31
 800088e:	f000 fa84 	bl	8000d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	; 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40005400 	.word	0x40005400
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400

080008a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_TIM_Base_MspInit+0x3c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d10d      	bne.n	80008d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_TIM_Base_MspInit+0x40>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <HAL_TIM_Base_MspInit+0x40>)
 80008c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <HAL_TIM_Base_MspInit+0x40>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40014800 	.word	0x40014800
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a19      	ldr	r2, [pc, #100]	; (8000970 <HAL_UART_MspInit+0x84>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d12b      	bne.n	8000966 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_UART_MspInit+0x88>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000946:	230c      	movs	r3, #12
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000956:	2307      	movs	r3, #7
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <HAL_UART_MspInit+0x8c>)
 8000962:	f000 fa65 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40004400 	.word	0x40004400
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f8ac 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <I2C1_EV_IRQHandler+0x10>)
 80009d6:	f000 fd31 	bl	800143c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000118 	.word	0x20000118

080009e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009ec:	f000 fbbe 	bl	800116c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <OTG_FS_IRQHandler+0x10>)
 80009fa:	f002 fa14 	bl	8002e26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200016dc 	.word	0x200016dc

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a56:	f7ff ffd7 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f008 fbfd 	bl	8009258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fd39 	bl	80004d4 <main>
  bx  lr    
 8000a62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a70:	08009328 	.word	0x08009328
  ldr r2, =_sbss
 8000a74:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a78:	20001e08 	.word	0x20001e08

08000a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <HAL_Init+0x40>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_Init+0x40>)
 8000a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_Init+0x40>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f94f 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 f808 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff fe80 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f967 	bl	8000db6 <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 f92f 	bl	8000d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	200001f8 	.word	0x200001f8

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200001f8 	.word	0x200001f8

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff ffee 	bl	8000b4c <HAL_GetTick>
 8000b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffde 	bl	8000b4c <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4907      	ldr	r1, [pc, #28]	; (8000c48 <__NVIC_EnableIRQ+0x38>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff29 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff3e 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff8e 	bl	8000ca0 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff31 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa2 	bl	8000d08 <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d004      	beq.n	8000dec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e00c      	b.n	8000e06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2205      	movs	r2, #5
 8000df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0201 	bic.w	r2, r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e20:	b2db      	uxtb	r3, r3
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e159      	b.n	8001100 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 8148 	bne.w	80010fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d005      	beq.n	8000e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d130      	bne.n	8000ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d017      	beq.n	8000f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80a2 	beq.w	80010fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b57      	ldr	r3, [pc, #348]	; (8001118 <HAL_GPIO_Init+0x2e8>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a56      	ldr	r2, [pc, #344]	; (8001118 <HAL_GPIO_Init+0x2e8>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b54      	ldr	r3, [pc, #336]	; (8001118 <HAL_GPIO_Init+0x2e8>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a52      	ldr	r2, [pc, #328]	; (800111c <HAL_GPIO_Init+0x2ec>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a49      	ldr	r2, [pc, #292]	; (8001120 <HAL_GPIO_Init+0x2f0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d019      	beq.n	8001032 <HAL_GPIO_Init+0x202>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a48      	ldr	r2, [pc, #288]	; (8001124 <HAL_GPIO_Init+0x2f4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0x1fe>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a47      	ldr	r2, [pc, #284]	; (8001128 <HAL_GPIO_Init+0x2f8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00d      	beq.n	800102a <HAL_GPIO_Init+0x1fa>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a46      	ldr	r2, [pc, #280]	; (800112c <HAL_GPIO_Init+0x2fc>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x1f6>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a45      	ldr	r2, [pc, #276]	; (8001130 <HAL_GPIO_Init+0x300>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_GPIO_Init+0x1f2>
 800101e:	2304      	movs	r3, #4
 8001020:	e008      	b.n	8001034 <HAL_GPIO_Init+0x204>
 8001022:	2307      	movs	r3, #7
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x204>
 8001026:	2303      	movs	r3, #3
 8001028:	e004      	b.n	8001034 <HAL_GPIO_Init+0x204>
 800102a:	2302      	movs	r3, #2
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x204>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x204>
 8001032:	2300      	movs	r3, #0
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4093      	lsls	r3, r2
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001044:	4935      	ldr	r1, [pc, #212]	; (800111c <HAL_GPIO_Init+0x2ec>)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001052:	4b38      	ldr	r3, [pc, #224]	; (8001134 <HAL_GPIO_Init+0x304>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001076:	4a2f      	ldr	r2, [pc, #188]	; (8001134 <HAL_GPIO_Init+0x304>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <HAL_GPIO_Init+0x304>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a0:	4a24      	ldr	r2, [pc, #144]	; (8001134 <HAL_GPIO_Init+0x304>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a6:	4b23      	ldr	r3, [pc, #140]	; (8001134 <HAL_GPIO_Init+0x304>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ca:	4a1a      	ldr	r2, [pc, #104]	; (8001134 <HAL_GPIO_Init+0x304>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_GPIO_Init+0x304>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f4:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_GPIO_Init+0x304>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	f67f aea2 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40013800 	.word	0x40013800
 8001120:	40020000 	.word	0x40020000
 8001124:	40020400 	.word	0x40020400
 8001128:	40020800 	.word	0x40020800
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40021000 	.word	0x40021000
 8001134:	40013c00 	.word	0x40013c00

08001138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
 8001144:	4613      	mov	r3, r2
 8001146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001148:	787b      	ldrb	r3, [r7, #1]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001154:	e003      	b.n	800115e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001156:	887b      	ldrh	r3, [r7, #2]
 8001158:	041a      	lsls	r2, r3, #16
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	619a      	str	r2, [r3, #24]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f806 	bl	800119c <HAL_GPIO_EXTI_Callback>
  }
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e12b      	b.n	800141e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d106      	bne.n	80011e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fb14 	bl	8000808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2224      	movs	r2, #36	; 0x24
 80011e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0201 	bic.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001218:	f003 fba2 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 800121c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4a81      	ldr	r2, [pc, #516]	; (8001428 <HAL_I2C_Init+0x274>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d807      	bhi.n	8001238 <HAL_I2C_Init+0x84>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a80      	ldr	r2, [pc, #512]	; (800142c <HAL_I2C_Init+0x278>)
 800122c:	4293      	cmp	r3, r2
 800122e:	bf94      	ite	ls
 8001230:	2301      	movls	r3, #1
 8001232:	2300      	movhi	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	e006      	b.n	8001246 <HAL_I2C_Init+0x92>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a7d      	ldr	r2, [pc, #500]	; (8001430 <HAL_I2C_Init+0x27c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	bf94      	ite	ls
 8001240:	2301      	movls	r3, #1
 8001242:	2300      	movhi	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0e7      	b.n	800141e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4a78      	ldr	r2, [pc, #480]	; (8001434 <HAL_I2C_Init+0x280>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	0c9b      	lsrs	r3, r3, #18
 8001258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	430a      	orrs	r2, r1
 800126c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a6a      	ldr	r2, [pc, #424]	; (8001428 <HAL_I2C_Init+0x274>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d802      	bhi.n	8001288 <HAL_I2C_Init+0xd4>
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3301      	adds	r3, #1
 8001286:	e009      	b.n	800129c <HAL_I2C_Init+0xe8>
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	4a69      	ldr	r2, [pc, #420]	; (8001438 <HAL_I2C_Init+0x284>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	099b      	lsrs	r3, r3, #6
 800129a:	3301      	adds	r3, #1
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	495c      	ldr	r1, [pc, #368]	; (8001428 <HAL_I2C_Init+0x274>)
 80012b8:	428b      	cmp	r3, r1
 80012ba:	d819      	bhi.n	80012f0 <HAL_I2C_Init+0x13c>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1e59      	subs	r1, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ca:	1c59      	adds	r1, r3, #1
 80012cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012d0:	400b      	ands	r3, r1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00a      	beq.n	80012ec <HAL_I2C_Init+0x138>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1e59      	subs	r1, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012e4:	3301      	adds	r3, #1
 80012e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ea:	e051      	b.n	8001390 <HAL_I2C_Init+0x1dc>
 80012ec:	2304      	movs	r3, #4
 80012ee:	e04f      	b.n	8001390 <HAL_I2C_Init+0x1dc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d111      	bne.n	800131c <HAL_I2C_Init+0x168>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1e58      	subs	r0, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6859      	ldr	r1, [r3, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	440b      	add	r3, r1
 8001306:	fbb0 f3f3 	udiv	r3, r0, r3
 800130a:	3301      	adds	r3, #1
 800130c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	e012      	b.n	8001342 <HAL_I2C_Init+0x18e>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	1e58      	subs	r0, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	0099      	lsls	r1, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001332:	3301      	adds	r3, #1
 8001334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf0c      	ite	eq
 800133c:	2301      	moveq	r3, #1
 800133e:	2300      	movne	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_I2C_Init+0x196>
 8001346:	2301      	movs	r3, #1
 8001348:	e022      	b.n	8001390 <HAL_I2C_Init+0x1dc>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10e      	bne.n	8001370 <HAL_I2C_Init+0x1bc>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1e58      	subs	r0, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6859      	ldr	r1, [r3, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	440b      	add	r3, r1
 8001360:	fbb0 f3f3 	udiv	r3, r0, r3
 8001364:	3301      	adds	r3, #1
 8001366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800136e:	e00f      	b.n	8001390 <HAL_I2C_Init+0x1dc>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1e58      	subs	r0, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6859      	ldr	r1, [r3, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	0099      	lsls	r1, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	fbb0 f3f3 	udiv	r3, r0, r3
 8001386:	3301      	adds	r3, #1
 8001388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	6809      	ldr	r1, [r1, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69da      	ldr	r2, [r3, #28]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6911      	ldr	r1, [r2, #16]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68d2      	ldr	r2, [r2, #12]
 80013ca:	4311      	orrs	r1, r2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	430b      	orrs	r3, r1
 80013d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2220      	movs	r2, #32
 800140a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	000186a0 	.word	0x000186a0
 800142c:	001e847f 	.word	0x001e847f
 8001430:	003d08ff 	.word	0x003d08ff
 8001434:	431bde83 	.word	0x431bde83
 8001438:	10624dd3 	.word	0x10624dd3

0800143c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800145c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001464:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	2b10      	cmp	r3, #16
 800146a:	d003      	beq.n	8001474 <HAL_I2C_EV_IRQHandler+0x38>
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b40      	cmp	r3, #64	; 0x40
 8001470:	f040 80b1 	bne.w	80015d6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10d      	bne.n	80014aa <HAL_I2C_EV_IRQHandler+0x6e>
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001494:	d003      	beq.n	800149e <HAL_I2C_EV_IRQHandler+0x62>
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800149c:	d101      	bne.n	80014a2 <HAL_I2C_EV_IRQHandler+0x66>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_I2C_EV_IRQHandler+0x68>
 80014a2:	2300      	movs	r3, #0
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	f000 8114 	beq.w	80016d2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00b      	beq.n	80014cc <HAL_I2C_EV_IRQHandler+0x90>
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f001 fb46 	bl	8002b50 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fcbf 	bl	8001e48 <I2C_Master_SB>
 80014ca:	e083      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d008      	beq.n	80014e8 <HAL_I2C_EV_IRQHandler+0xac>
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fd37 	bl	8001f54 <I2C_Master_ADD10>
 80014e6:	e075      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <HAL_I2C_EV_IRQHandler+0xc8>
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fd53 	bl	8001fa8 <I2C_Master_ADDR>
 8001502:	e067      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d036      	beq.n	800157c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800151c:	f000 80db 	beq.w	80016d6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00d      	beq.n	8001546 <HAL_I2C_EV_IRQHandler+0x10a>
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_I2C_EV_IRQHandler+0x10a>
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b00      	cmp	r3, #0
 800153c:	d103      	bne.n	8001546 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f937 	bl	80017b2 <I2C_MasterTransmit_TXE>
 8001544:	e046      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80c2 	beq.w	80016d6 <HAL_I2C_EV_IRQHandler+0x29a>
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80bc 	beq.w	80016d6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	2b21      	cmp	r3, #33	; 0x21
 8001562:	d103      	bne.n	800156c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f9c0 	bl	80018ea <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800156a:	e0b4      	b.n	80016d6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2b40      	cmp	r3, #64	; 0x40
 8001570:	f040 80b1 	bne.w	80016d6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fa2e 	bl	80019d6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800157a:	e0ac      	b.n	80016d6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800158a:	f000 80a4 	beq.w	80016d6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00d      	beq.n	80015b4 <HAL_I2C_EV_IRQHandler+0x178>
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d008      	beq.n	80015b4 <HAL_I2C_EV_IRQHandler+0x178>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d103      	bne.n	80015b4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 faa6 	bl	8001afe <I2C_MasterReceive_RXNE>
 80015b2:	e00f      	b.n	80015d4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 808b 	beq.w	80016d6 <HAL_I2C_EV_IRQHandler+0x29a>
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8085 	beq.w	80016d6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fb51 	bl	8001c74 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015d2:	e080      	b.n	80016d6 <HAL_I2C_EV_IRQHandler+0x29a>
 80015d4:	e07f      	b.n	80016d6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d004      	beq.n	80015e8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	e007      	b.n	80015f8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d011      	beq.n	8001626 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00c      	beq.n	8001626 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800161c:	69b9      	ldr	r1, [r7, #24]
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 ff11 	bl	8002446 <I2C_Slave_ADDR>
 8001624:	e05a      	b.n	80016dc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_I2C_EV_IRQHandler+0x206>
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 ff4c 	bl	80024d8 <I2C_Slave_STOPF>
 8001640:	e04c      	b.n	80016dc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001642:	7bbb      	ldrb	r3, [r7, #14]
 8001644:	2b21      	cmp	r3, #33	; 0x21
 8001646:	d002      	beq.n	800164e <HAL_I2C_EV_IRQHandler+0x212>
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	2b29      	cmp	r3, #41	; 0x29
 800164c:	d120      	bne.n	8001690 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00d      	beq.n	8001674 <HAL_I2C_EV_IRQHandler+0x238>
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165e:	2b00      	cmp	r3, #0
 8001660:	d008      	beq.n	8001674 <HAL_I2C_EV_IRQHandler+0x238>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d103      	bne.n	8001674 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 fe2c 	bl	80022ca <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001672:	e032      	b.n	80016da <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	d02d      	beq.n	80016da <HAL_I2C_EV_IRQHandler+0x29e>
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001684:	2b00      	cmp	r3, #0
 8001686:	d028      	beq.n	80016da <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 fe5b 	bl	8002344 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800168e:	e024      	b.n	80016da <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00d      	beq.n	80016b6 <HAL_I2C_EV_IRQHandler+0x27a>
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_I2C_EV_IRQHandler+0x27a>
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d103      	bne.n	80016b6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fe69 	bl	8002386 <I2C_SlaveReceive_RXNE>
 80016b4:	e012      	b.n	80016dc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00d      	beq.n	80016dc <HAL_I2C_EV_IRQHandler+0x2a0>
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d008      	beq.n	80016dc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fe99 	bl	8002402 <I2C_SlaveReceive_BTF>
 80016d0:	e004      	b.n	80016dc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80016d2:	bf00      	nop
 80016d4:	e002      	b.n	80016dc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016d6:	bf00      	nop
 80016d8:	e000      	b.n	80016dc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016da:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	70fb      	strb	r3, [r7, #3]
 800173e:	4613      	mov	r3, r2
 8001740:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017c8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d150      	bne.n	800187a <I2C_MasterTransmit_TXE+0xc8>
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b21      	cmp	r3, #33	; 0x21
 80017dc:	d14d      	bne.n	800187a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d01d      	beq.n	8001820 <I2C_MasterTransmit_TXE+0x6e>
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b20      	cmp	r3, #32
 80017e8:	d01a      	beq.n	8001820 <I2C_MasterTransmit_TXE+0x6e>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017f0:	d016      	beq.n	8001820 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001800:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2211      	movs	r2, #17
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff62 	bl	80016e2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800181e:	e060      	b.n	80018e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800182e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800183e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b40      	cmp	r3, #64	; 0x40
 8001858:	d107      	bne.n	800186a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ff7d 	bl	8001762 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001868:	e03b      	b.n	80018e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ff35 	bl	80016e2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001878:	e033      	b.n	80018e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	2b21      	cmp	r3, #33	; 0x21
 800187e:	d005      	beq.n	800188c <I2C_MasterTransmit_TXE+0xda>
 8001880:	7bbb      	ldrb	r3, [r7, #14]
 8001882:	2b40      	cmp	r3, #64	; 0x40
 8001884:	d12d      	bne.n	80018e2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	2b22      	cmp	r3, #34	; 0x22
 800188a:	d12a      	bne.n	80018e2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d108      	bne.n	80018a8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80018a6:	e01c      	b.n	80018e2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b40      	cmp	r3, #64	; 0x40
 80018b2:	d103      	bne.n	80018bc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f88e 	bl	80019d6 <I2C_MemoryTransmit_TXE_BTF>
}
 80018ba:	e012      	b.n	80018e2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3b01      	subs	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80018e0:	e7ff      	b.n	80018e2 <I2C_MasterTransmit_TXE+0x130>
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b21      	cmp	r3, #33	; 0x21
 8001902:	d164      	bne.n	80019ce <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d012      	beq.n	8001934 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001932:	e04c      	b.n	80019ce <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b08      	cmp	r3, #8
 8001938:	d01d      	beq.n	8001976 <I2C_MasterTransmit_BTF+0x8c>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b20      	cmp	r3, #32
 800193e:	d01a      	beq.n	8001976 <I2C_MasterTransmit_BTF+0x8c>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001946:	d016      	beq.n	8001976 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001956:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2211      	movs	r2, #17
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff feb7 	bl	80016e2 <HAL_I2C_MasterTxCpltCallback>
}
 8001974:	e02b      	b.n	80019ce <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001984:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001994:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b40      	cmp	r3, #64	; 0x40
 80019ae:	d107      	bne.n	80019c0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fed2 	bl	8001762 <HAL_I2C_MemTxCpltCallback>
}
 80019be:	e006      	b.n	80019ce <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fe8a 	bl	80016e2 <HAL_I2C_MasterTxCpltCallback>
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d11d      	bne.n	8001a2a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d10b      	bne.n	8001a0e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a06:	1c9a      	adds	r2, r3, #2
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001a0c:	e073      	b.n	8001af6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	121b      	asrs	r3, r3, #8
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a28:	e065      	b.n	8001af6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10b      	bne.n	8001a4a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a48:	e055      	b.n	8001af6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d151      	bne.n	8001af6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b22      	cmp	r3, #34	; 0x22
 8001a56:	d10d      	bne.n	8001a74 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a66:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a72:	e040      	b.n	8001af6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d015      	beq.n	8001aaa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	2b21      	cmp	r3, #33	; 0x21
 8001a82:	d112      	bne.n	8001aaa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	781a      	ldrb	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001aa8:	e025      	b.n	8001af6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d120      	bne.n	8001af6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	2b21      	cmp	r3, #33	; 0x21
 8001ab8:	d11d      	bne.n	8001af6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ac8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff fe36 	bl	8001762 <HAL_I2C_MemTxCpltCallback>
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b22      	cmp	r3, #34	; 0x22
 8001b10:	f040 80ac 	bne.w	8001c6c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d921      	bls.n	8001b66 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	f040 808c 	bne.w	8001c6c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b62:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001b64:	e082      	b.n	8001c6c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d075      	beq.n	8001c5a <I2C_MasterReceive_RXNE+0x15c>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d002      	beq.n	8001b7a <I2C_MasterReceive_RXNE+0x7c>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d16f      	bne.n	8001c5a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 ffb6 	bl	8002aec <I2C_WaitOnSTOPRequestThroughIT>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d142      	bne.n	8001c0c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b94:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ba4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b40      	cmp	r3, #64	; 0x40
 8001bde:	d10a      	bne.n	8001bf6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fdc1 	bl	8001776 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001bf4:	e03a      	b.n	8001c6c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2212      	movs	r2, #18
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff fd76 	bl	80016f6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001c0a:	e02f      	b.n	8001c6c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c1a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fd99 	bl	800178a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001c58:	e008      	b.n	8001c6c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c68:	605a      	str	r2, [r3, #4]
}
 8001c6a:	e7ff      	b.n	8001c6c <I2C_MasterReceive_RXNE+0x16e>
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d11b      	bne.n	8001cc4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001cc2:	e0bd      	b.n	8001e40 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d129      	bne.n	8001d22 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cdc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d00a      	beq.n	8001cfa <I2C_MasterReceive_BTF+0x86>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d007      	beq.n	8001cfa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cf8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d20:	e08e      	b.n	8001e40 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d176      	bne.n	8001e1a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d002      	beq.n	8001d38 <I2C_MasterReceive_BTF+0xc4>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b10      	cmp	r3, #16
 8001d36:	d108      	bne.n	8001d4a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e019      	b.n	8001d7e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d002      	beq.n	8001d56 <I2C_MasterReceive_BTF+0xe2>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d108      	bne.n	8001d68 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e00a      	b.n	8001d7e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	d007      	beq.n	8001d7e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001dd8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b40      	cmp	r3, #64	; 0x40
 8001dec:	d10a      	bne.n	8001e04 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fcba 	bl	8001776 <HAL_I2C_MemRxCpltCallback>
}
 8001e02:	e01d      	b.n	8001e40 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2212      	movs	r2, #18
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fc6f 	bl	80016f6 <HAL_I2C_MasterRxCpltCallback>
}
 8001e18:	e012      	b.n	8001e40 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e40:	bf00      	nop
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b40      	cmp	r3, #64	; 0x40
 8001e5a:	d117      	bne.n	8001e8c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e74:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001e76:	e067      	b.n	8001f48 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	611a      	str	r2, [r3, #16]
}
 8001e8a:	e05d      	b.n	8001f48 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e94:	d133      	bne.n	8001efe <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b21      	cmp	r3, #33	; 0x21
 8001ea0:	d109      	bne.n	8001eb6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001eb2:	611a      	str	r2, [r3, #16]
 8001eb4:	e008      	b.n	8001ec8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <I2C_Master_SB+0x92>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d108      	bne.n	8001eec <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d032      	beq.n	8001f48 <I2C_Master_SB+0x100>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d02d      	beq.n	8001f48 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001efa:	605a      	str	r2, [r3, #4]
}
 8001efc:	e024      	b.n	8001f48 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10e      	bne.n	8001f24 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	11db      	asrs	r3, r3, #7
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f003 0306 	and.w	r3, r3, #6
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f063 030f 	orn	r3, r3, #15
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	611a      	str	r2, [r3, #16]
}
 8001f22:	e011      	b.n	8001f48 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d10d      	bne.n	8001f48 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	11db      	asrs	r3, r3, #7
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f003 0306 	and.w	r3, r3, #6
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f063 030e 	orn	r3, r3, #14
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	611a      	str	r2, [r3, #16]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <I2C_Master_ADD10+0x26>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d108      	bne.n	8001f8c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00c      	beq.n	8001f9c <I2C_Master_ADD10+0x48>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f9a:	605a      	str	r2, [r3, #4]
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b091      	sub	sp, #68	; 0x44
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b22      	cmp	r3, #34	; 0x22
 8001fd0:	f040 8169 	bne.w	80022a6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10f      	bne.n	8001ffc <I2C_Master_ADDR+0x54>
 8001fdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fe0:	2b40      	cmp	r3, #64	; 0x40
 8001fe2:	d10b      	bne.n	8001ffc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffa:	e160      	b.n	80022be <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002000:	2b00      	cmp	r3, #0
 8002002:	d11d      	bne.n	8002040 <I2C_Master_ADDR+0x98>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800200c:	d118      	bne.n	8002040 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200e:	2300      	movs	r3, #0
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002022:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002032:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	651a      	str	r2, [r3, #80]	; 0x50
 800203e:	e13e      	b.n	80022be <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d113      	bne.n	8002072 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e115      	b.n	800229e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	f040 808a 	bne.w	8002192 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800207e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002080:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002084:	d137      	bne.n	80020f6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002094:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020a4:	d113      	bne.n	80020ce <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	e0e7      	b.n	800229e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	623b      	str	r3, [r7, #32]
 80020e2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e0d3      	b.n	800229e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80020f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d02e      	beq.n	800215a <I2C_Master_ADDR+0x1b2>
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d02b      	beq.n	800215a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002104:	2b12      	cmp	r3, #18
 8002106:	d102      	bne.n	800210e <I2C_Master_ADDR+0x166>
 8002108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210a:	2b01      	cmp	r3, #1
 800210c:	d125      	bne.n	800215a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002110:	2b04      	cmp	r3, #4
 8002112:	d00e      	beq.n	8002132 <I2C_Master_ADDR+0x18a>
 8002114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002116:	2b02      	cmp	r3, #2
 8002118:	d00b      	beq.n	8002132 <I2C_Master_ADDR+0x18a>
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	2b10      	cmp	r3, #16
 800211e:	d008      	beq.n	8002132 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e007      	b.n	8002142 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002140:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	e0a1      	b.n	800229e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002168:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e085      	b.n	800229e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d14d      	bne.n	8002238 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800219c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d016      	beq.n	80021d0 <I2C_Master_ADDR+0x228>
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d013      	beq.n	80021d0 <I2C_Master_ADDR+0x228>
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d010      	beq.n	80021d0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021bc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e007      	b.n	80021e0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021de:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ee:	d117      	bne.n	8002220 <I2C_Master_ADDR+0x278>
 80021f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021f6:	d00b      	beq.n	8002210 <I2C_Master_ADDR+0x268>
 80021f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d008      	beq.n	8002210 <I2C_Master_ADDR+0x268>
 80021fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002200:	2b08      	cmp	r3, #8
 8002202:	d005      	beq.n	8002210 <I2C_Master_ADDR+0x268>
 8002204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002206:	2b10      	cmp	r3, #16
 8002208:	d002      	beq.n	8002210 <I2C_Master_ADDR+0x268>
 800220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220c:	2b20      	cmp	r3, #32
 800220e:	d107      	bne.n	8002220 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800221e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	e032      	b.n	800229e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002246:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002256:	d117      	bne.n	8002288 <I2C_Master_ADDR+0x2e0>
 8002258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800225e:	d00b      	beq.n	8002278 <I2C_Master_ADDR+0x2d0>
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	2b01      	cmp	r3, #1
 8002264:	d008      	beq.n	8002278 <I2C_Master_ADDR+0x2d0>
 8002266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002268:	2b08      	cmp	r3, #8
 800226a:	d005      	beq.n	8002278 <I2C_Master_ADDR+0x2d0>
 800226c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226e:	2b10      	cmp	r3, #16
 8002270:	d002      	beq.n	8002278 <I2C_Master_ADDR+0x2d0>
 8002272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002274:	2b20      	cmp	r3, #32
 8002276:	d107      	bne.n	8002288 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002286:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80022a4:	e00b      	b.n	80022be <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	e7ff      	b.n	80022be <I2C_Master_ADDR+0x316>
 80022be:	bf00      	nop
 80022c0:	3744      	adds	r7, #68	; 0x44
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d02b      	beq.n	800233c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d114      	bne.n	800233c <I2C_SlaveTransmit_TXE+0x72>
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	2b29      	cmp	r3, #41	; 0x29
 8002316:	d111      	bne.n	800233c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002326:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2221      	movs	r2, #33	; 0x21
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2228      	movs	r2, #40	; 0x28
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff f9e7 	bl	800170a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d011      	beq.n	800237a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d02c      	beq.n	80023fa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d114      	bne.n	80023fa <I2C_SlaveReceive_RXNE+0x74>
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b2a      	cmp	r3, #42	; 0x2a
 80023d4:	d111      	bne.n	80023fa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2222      	movs	r2, #34	; 0x22
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2228      	movs	r2, #40	; 0x28
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff f992 	bl	800171e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d012      	beq.n	800243a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002460:	2b28      	cmp	r3, #40	; 0x28
 8002462:	d125      	bne.n	80024b0 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002472:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002488:	2b00      	cmp	r3, #0
 800248a:	d103      	bne.n	8002494 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	81bb      	strh	r3, [r7, #12]
 8002492:	e002      	b.n	800249a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80024a2:	89ba      	ldrh	r2, [r7, #12]
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	4619      	mov	r1, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff f942 	bl	8001732 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80024ae:	e00e      	b.n	80024ce <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80024f8:	2300      	movs	r3, #0
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002524:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002534:	d172      	bne.n	800261c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b22      	cmp	r3, #34	; 0x22
 800253a:	d002      	beq.n	8002542 <I2C_Slave_STOPF+0x6a>
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b2a      	cmp	r3, #42	; 0x2a
 8002540:	d135      	bne.n	80025ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	b29a      	uxth	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f043 0204 	orr.w	r2, r3, #4
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002574:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fc49 	bl	8000e12 <HAL_DMA_GetState>
 8002580:	4603      	mov	r3, r0
 8002582:	2b01      	cmp	r3, #1
 8002584:	d049      	beq.n	800261a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	4a69      	ldr	r2, [pc, #420]	; (8002730 <I2C_Slave_STOPF+0x258>)
 800258c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fc1b 	bl	8000dce <HAL_DMA_Abort_IT>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d03d      	beq.n	800261a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025a8:	4610      	mov	r0, r2
 80025aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025ac:	e035      	b.n	800261a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fc13 	bl	8000e12 <HAL_DMA_GetState>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d014      	beq.n	800261c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f6:	4a4e      	ldr	r2, [pc, #312]	; (8002730 <I2C_Slave_STOPF+0x258>)
 80025f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fbe5 	bl	8000dce <HAL_DMA_Abort_IT>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002614:	4610      	mov	r0, r2
 8002616:	4798      	blx	r3
 8002618:	e000      	b.n	800261c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800261a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d03e      	beq.n	80026a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d112      	bne.n	800265a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d112      	bne.n	800268e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f043 0204 	orr.w	r2, r3, #4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f843 	bl	8002738 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80026b2:	e039      	b.n	8002728 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b2a      	cmp	r3, #42	; 0x2a
 80026b8:	d109      	bne.n	80026ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2228      	movs	r2, #40	; 0x28
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff f828 	bl	800171e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b28      	cmp	r3, #40	; 0x28
 80026d8:	d111      	bne.n	80026fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a15      	ldr	r2, [pc, #84]	; (8002734 <I2C_Slave_STOPF+0x25c>)
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff f829 	bl	800174e <HAL_I2C_ListenCpltCallback>
}
 80026fc:	e014      	b.n	8002728 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	2b22      	cmp	r3, #34	; 0x22
 8002704:	d002      	beq.n	800270c <I2C_Slave_STOPF+0x234>
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b22      	cmp	r3, #34	; 0x22
 800270a:	d10d      	bne.n	8002728 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe fffb 	bl	800171e <HAL_I2C_SlaveRxCpltCallback>
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	0800299d 	.word	0x0800299d
 8002734:	ffff0000 	.word	0xffff0000

08002738 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002746:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800274e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	2b10      	cmp	r3, #16
 8002754:	d002      	beq.n	800275c <I2C_ITError+0x24>
 8002756:	7bbb      	ldrb	r3, [r7, #14]
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d10a      	bne.n	8002772 <I2C_ITError+0x3a>
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b22      	cmp	r3, #34	; 0x22
 8002760:	d107      	bne.n	8002772 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002770:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002778:	2b28      	cmp	r3, #40	; 0x28
 800277a:	d107      	bne.n	800278c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2228      	movs	r2, #40	; 0x28
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800278a:	e015      	b.n	80027b8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800279a:	d00a      	beq.n	80027b2 <I2C_ITError+0x7a>
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b60      	cmp	r3, #96	; 0x60
 80027a0:	d007      	beq.n	80027b2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c6:	d162      	bne.n	800288e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d020      	beq.n	8002828 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ea:	4a6a      	ldr	r2, [pc, #424]	; (8002994 <I2C_ITError+0x25c>)
 80027ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe faeb 	bl	8000dce <HAL_DMA_Abort_IT>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8089 	beq.w	8002912 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002822:	4610      	mov	r0, r2
 8002824:	4798      	blx	r3
 8002826:	e074      	b.n	8002912 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	4a59      	ldr	r2, [pc, #356]	; (8002994 <I2C_ITError+0x25c>)
 800282e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe faca 	bl	8000dce <HAL_DMA_Abort_IT>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d068      	beq.n	8002912 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d10b      	bne.n	8002866 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002888:	4610      	mov	r0, r2
 800288a:	4798      	blx	r3
 800288c:	e041      	b.n	8002912 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b60      	cmp	r3, #96	; 0x60
 8002898:	d125      	bne.n	80028e6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b2:	2b40      	cmp	r3, #64	; 0x40
 80028b4:	d10b      	bne.n	80028ce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fe ff5d 	bl	800179e <HAL_I2C_AbortCpltCallback>
 80028e4:	e015      	b.n	8002912 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f0:	2b40      	cmp	r3, #64	; 0x40
 80028f2:	d10b      	bne.n	800290c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7fe ff3c 	bl	800178a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10e      	bne.n	8002940 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002928:	2b00      	cmp	r3, #0
 800292a:	d109      	bne.n	8002940 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800294e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002956:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b04      	cmp	r3, #4
 8002962:	d113      	bne.n	800298c <I2C_ITError+0x254>
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	2b28      	cmp	r3, #40	; 0x28
 8002968:	d110      	bne.n	800298c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <I2C_ITError+0x260>)
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe fee1 	bl	800174e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	0800299d 	.word	0x0800299d
 8002998:	ffff0000 	.word	0xffff0000

0800299c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029b6:	4b4b      	ldr	r3, [pc, #300]	; (8002ae4 <I2C_DMAAbort+0x148>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	08db      	lsrs	r3, r3, #3
 80029bc:	4a4a      	ldr	r2, [pc, #296]	; (8002ae8 <I2C_DMAAbort+0x14c>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0a1a      	lsrs	r2, r3, #8
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00da      	lsls	r2, r3, #3
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f043 0220 	orr.w	r2, r3, #32
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80029e2:	e00a      	b.n	80029fa <I2C_DMAAbort+0x5e>
    }
    count--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f8:	d0ea      	beq.n	80029d0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	2200      	movs	r2, #0
 8002a08:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	2200      	movs	r2, #0
 8002a18:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a28:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b60      	cmp	r3, #96	; 0x60
 8002a6a:	d10e      	bne.n	8002a8a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7fe fe8b 	bl	800179e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a88:	e027      	b.n	8002ada <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a90:	2b28      	cmp	r3, #40	; 0x28
 8002a92:	d117      	bne.n	8002ac4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ab2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2228      	movs	r2, #40	; 0x28
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ac2:	e007      	b.n	8002ad4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002ad4:	6978      	ldr	r0, [r7, #20]
 8002ad6:	f7fe fe58 	bl	800178a <HAL_I2C_ErrorCallback>
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	14f8b589 	.word	0x14f8b589

08002aec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002af8:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	08db      	lsrs	r3, r3, #3
 8002afe:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	0a1a      	lsrs	r2, r3, #8
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d107      	bne.n	8002b2a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f043 0220 	orr.w	r2, r3, #32
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e008      	b.n	8002b3c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b38:	d0e9      	beq.n	8002b0e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	14f8b589 	.word	0x14f8b589

08002b50 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002b60:	d103      	bne.n	8002b6a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b68:	e007      	b.n	8002b7a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002b72:	d102      	bne.n	8002b7a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2208      	movs	r2, #8
 8002b78:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b88:	b08f      	sub	sp, #60	; 0x3c
 8002b8a:	af0a      	add	r7, sp, #40	; 0x28
 8002b8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e10f      	b.n	8002db8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f006 f83e 	bl	8008c34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 fb91 	bl	80052fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	687e      	ldr	r6, [r7, #4]
 8002be4:	466d      	mov	r5, sp
 8002be6:	f106 0410 	add.w	r4, r6, #16
 8002bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bfa:	1d33      	adds	r3, r6, #4
 8002bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfe:	6838      	ldr	r0, [r7, #0]
 8002c00:	f002 fa68 	bl	80050d4 <USB_CoreInit>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0d0      	b.n	8002db8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f002 fb7f 	bl	8005320 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	e04a      	b.n	8002cbe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	333d      	adds	r3, #61	; 0x3d
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	333c      	adds	r3, #60	; 0x3c
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	b298      	uxth	r0, r3
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	3344      	adds	r3, #68	; 0x44
 8002c64:	4602      	mov	r2, r0
 8002c66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3340      	adds	r3, #64	; 0x40
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	3348      	adds	r3, #72	; 0x48
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	334c      	adds	r3, #76	; 0x4c
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3354      	adds	r3, #84	; 0x54
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d3af      	bcc.n	8002c28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	e044      	b.n	8002d58 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d26:	7bfa      	ldrb	r2, [r7, #15]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	3301      	adds	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d3b5      	bcc.n	8002cce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	687e      	ldr	r6, [r7, #4]
 8002d6a:	466d      	mov	r5, sp
 8002d6c:	f106 0410 	add.w	r4, r6, #16
 8002d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d80:	1d33      	adds	r3, r6, #4
 8002d82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d84:	6838      	ldr	r0, [r7, #0]
 8002d86:	f002 fb17 	bl	80053b8 <USB_DevInit>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e00d      	b.n	8002db8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 fc66 	bl	8006682 <USB_DevDisconnect>

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_PCD_Start+0x1c>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e020      	b.n	8002e1e <HAL_PCD_Start+0x5e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d109      	bne.n	8002e00 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d005      	beq.n	8002e00 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 fa69 	bl	80052dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f003 fc16 	bl	8006640 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e26:	b590      	push	{r4, r7, lr}
 8002e28:	b08d      	sub	sp, #52	; 0x34
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 fcd4 	bl	80067ea <USB_GetMode>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f040 848a 	bne.w	800375e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f003 fc38 	bl	80066c4 <USB_ReadInterrupts>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 8480 	beq.w	800375c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 fc25 	bl	80066c4 <USB_ReadInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d107      	bne.n	8002e94 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f002 0202 	and.w	r2, r2, #2
 8002e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 fc13 	bl	80066c4 <USB_ReadInterrupts>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d161      	bne.n	8002f6c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0210 	bic.w	r2, r2, #16
 8002eb6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	f003 020f 	and.w	r2, r3, #15
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	0c5b      	lsrs	r3, r3, #17
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d124      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d035      	beq.n	8002f5c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	6a38      	ldr	r0, [r7, #32]
 8002f04:	f003 fa4a 	bl	800639c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f14:	441a      	add	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	6a1a      	ldr	r2, [r3, #32]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f26:	441a      	add	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	621a      	str	r2, [r3, #32]
 8002f2c:	e016      	b.n	8002f5c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	0c5b      	lsrs	r3, r3, #17
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d110      	bne.n	8002f5c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f40:	2208      	movs	r2, #8
 8002f42:	4619      	mov	r1, r3
 8002f44:	6a38      	ldr	r0, [r7, #32]
 8002f46:	f003 fa29 	bl	800639c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	6a1a      	ldr	r2, [r3, #32]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f56:	441a      	add	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0210 	orr.w	r2, r2, #16
 8002f6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f003 fba7 	bl	80066c4 <USB_ReadInterrupts>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f80:	f040 80a7 	bne.w	80030d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f003 fbac 	bl	80066ea <USB_ReadDevAllOutEpInterrupt>
 8002f92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f94:	e099      	b.n	80030ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 808e 	beq.w	80030be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f003 fbd0 	bl	8006752 <USB_ReadDevOutEPInterrupt>
 8002fb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00c      	beq.n	8002fd8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2301      	movs	r3, #1
 8002fce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fec2 	bl	8003d5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 ff98 	bl	8003f2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003012:	461a      	mov	r2, r3
 8003014:	2310      	movs	r3, #16
 8003016:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d030      	beq.n	8003084 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302a:	2b80      	cmp	r3, #128	; 0x80
 800302c:	d109      	bne.n	8003042 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800303c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003040:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	3304      	adds	r3, #4
 8003056:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	78db      	ldrb	r3, [r3, #3]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d108      	bne.n	8003072 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2200      	movs	r2, #0
 8003064:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	b2db      	uxtb	r3, r3
 800306a:	4619      	mov	r1, r3
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f005 fedd 	bl	8008e2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307e:	461a      	mov	r2, r3
 8003080:	2302      	movs	r3, #2
 8003082:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309a:	461a      	mov	r2, r3
 800309c:	2320      	movs	r3, #32
 800309e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b6:	461a      	mov	r2, r3
 80030b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	3301      	adds	r3, #1
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f47f af62 	bne.w	8002f96 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f003 faf4 	bl	80066c4 <USB_ReadInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030e6:	f040 80db 	bne.w	80032a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 fb15 	bl	800671e <USB_ReadDevAllInEpInterrupt>
 80030f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030fa:	e0cd      	b.n	8003298 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80c2 	beq.w	800328c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f003 fb3b 	bl	800678e <USB_ReadDevInEPInterrupt>
 8003118:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d057      	beq.n	80031d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	2201      	movs	r2, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	43db      	mvns	r3, r3
 800313e:	69f9      	ldr	r1, [r7, #28]
 8003140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003144:	4013      	ands	r3, r2
 8003146:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003154:	461a      	mov	r2, r3
 8003156:	2301      	movs	r3, #1
 8003158:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d132      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334c      	adds	r3, #76	; 0x4c
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4403      	add	r3, r0
 8003182:	3348      	adds	r3, #72	; 0x48
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4419      	add	r1, r3
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4403      	add	r3, r0
 8003196:	334c      	adds	r3, #76	; 0x4c
 8003198:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	2b00      	cmp	r3, #0
 800319e:	d113      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x3a2>
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3354      	adds	r3, #84	; 0x54
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d108      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031c0:	461a      	mov	r2, r3
 80031c2:	2101      	movs	r1, #1
 80031c4:	f003 fb42 	bl	800684c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	4619      	mov	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f005 fdb1 	bl	8008d36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ea:	461a      	mov	r2, r3
 80031ec:	2308      	movs	r3, #8
 80031ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003206:	461a      	mov	r2, r3
 8003208:	2310      	movs	r3, #16
 800320a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003222:	461a      	mov	r2, r3
 8003224:	2340      	movs	r3, #64	; 0x40
 8003226:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d023      	beq.n	800327a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003234:	6a38      	ldr	r0, [r7, #32]
 8003236:	f002 fa23 	bl	8005680 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	3338      	adds	r3, #56	; 0x38
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	78db      	ldrb	r3, [r3, #3]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	b2db      	uxtb	r3, r3
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f005 fdf4 	bl	8008e50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003274:	461a      	mov	r2, r3
 8003276:	2302      	movs	r3, #2
 8003278:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fcdb 	bl	8003c42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	3301      	adds	r3, #1
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	085b      	lsrs	r3, r3, #1
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	2b00      	cmp	r3, #0
 800329c:	f47f af2e 	bne.w	80030fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f003 fa0d 	bl	80066c4 <USB_ReadInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032b4:	d122      	bne.n	80032fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d108      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032dc:	2100      	movs	r1, #0
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fec2 	bl	8004068 <HAL_PCDEx_LPM_Callback>
 80032e4:	e002      	b.n	80032ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f005 fd92 	bl	8008e10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f003 f9df 	bl	80066c4 <USB_ReadInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003310:	d112      	bne.n	8003338 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b01      	cmp	r3, #1
 8003320:	d102      	bne.n	8003328 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f005 fd4e 	bl	8008dc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003336:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f003 f9c1 	bl	80066c4 <USB_ReadInterrupts>
 8003342:	4603      	mov	r3, r0
 8003344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334c:	f040 80b7 	bne.w	80034be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2110      	movs	r1, #16
 800336a:	4618      	mov	r0, r3
 800336c:	f002 f988 	bl	8005680 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003370:	2300      	movs	r3, #0
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003374:	e046      	b.n	8003404 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003382:	461a      	mov	r2, r3
 8003384:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003388:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800339a:	0151      	lsls	r1, r2, #5
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	440a      	add	r2, r1
 80033a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b6:	461a      	mov	r2, r3
 80033b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ce:	0151      	lsls	r1, r2, #5
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	440a      	add	r2, r1
 80033d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ee:	0151      	lsls	r1, r2, #5
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	440a      	add	r2, r1
 80033f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003400:	3301      	adds	r3, #1
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800340a:	429a      	cmp	r2, r3
 800340c:	d3b3      	bcc.n	8003376 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003420:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	2b00      	cmp	r3, #0
 8003428:	d016      	beq.n	8003458 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800343a:	f043 030b 	orr.w	r3, r3, #11
 800343e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003450:	f043 030b 	orr.w	r3, r3, #11
 8003454:	6453      	str	r3, [r2, #68]	; 0x44
 8003456:	e015      	b.n	8003484 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003466:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800346a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800346e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800347e:	f043 030b 	orr.w	r3, r3, #11
 8003482:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003492:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003496:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034a8:	461a      	mov	r2, r3
 80034aa:	f003 f9cf 	bl	800684c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f003 f8fe 	bl	80066c4 <USB_ReadInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d2:	d124      	bne.n	800351e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f003 f994 	bl	8006806 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f002 f949 	bl	800577a <USB_GetDevSpeed>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681c      	ldr	r4, [r3, #0]
 80034f4:	f001 fa28 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 80034f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	4620      	mov	r0, r4
 8003504:	f001 fe48 	bl	8005198 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f005 fc3c 	bl	8008d86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800351c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f003 f8ce 	bl	80066c4 <USB_ReadInterrupts>
 8003528:	4603      	mov	r3, r0
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b08      	cmp	r3, #8
 8003530:	d10a      	bne.n	8003548 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f005 fc19 	bl	8008d6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f002 0208 	and.w	r2, r2, #8
 8003546:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f003 f8b9 	bl	80066c4 <USB_ReadInterrupts>
 8003552:	4603      	mov	r3, r0
 8003554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003558:	2b80      	cmp	r3, #128	; 0x80
 800355a:	d122      	bne.n	80035a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003568:	2301      	movs	r3, #1
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
 800356c:	e014      	b.n	8003598 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d105      	bne.n	8003592 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	b2db      	uxtb	r3, r3
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fb27 	bl	8003be0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	3301      	adds	r3, #1
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359e:	429a      	cmp	r2, r3
 80035a0:	d3e5      	bcc.n	800356e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f003 f88c 	bl	80066c4 <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b6:	d13b      	bne.n	8003630 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035b8:	2301      	movs	r3, #1
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
 80035bc:	e02b      	b.n	8003616 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3340      	adds	r3, #64	; 0x40
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d115      	bne.n	8003610 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	da12      	bge.n	8003610 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	333f      	adds	r3, #63	; 0x3f
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003606:	b2db      	uxtb	r3, r3
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fae8 	bl	8003be0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	3301      	adds	r3, #1
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361c:	429a      	cmp	r2, r3
 800361e:	d3ce      	bcc.n	80035be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800362e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f003 f845 	bl	80066c4 <USB_ReadInterrupts>
 800363a:	4603      	mov	r3, r0
 800363c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003640:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003644:	d155      	bne.n	80036f2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003646:	2301      	movs	r3, #1
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	e045      	b.n	80036d8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d12e      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003674:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003676:	2b00      	cmp	r3, #0
 8003678:	da2b      	bge.n	80036d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003686:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800368a:	429a      	cmp	r2, r3
 800368c:	d121      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ce:	6053      	str	r3, [r2, #4]
            break;
 80036d0:	e007      	b.n	80036e2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	3301      	adds	r3, #1
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036de:	429a      	cmp	r2, r3
 80036e0:	d3b4      	bcc.n	800364c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f002 ffe4 	bl	80066c4 <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003706:	d10a      	bne.n	800371e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f005 fbb3 	bl	8008e74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800371c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f002 ffce 	bl	80066c4 <USB_ReadInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b04      	cmp	r3, #4
 8003730:	d115      	bne.n	800375e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f005 fba3 	bl	8008e90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	e000      	b.n	800375e <HAL_PCD_IRQHandler+0x938>
      return;
 800375c:	bf00      	nop
    }
  }
}
 800375e:	3734      	adds	r7, #52	; 0x34
 8003760:	46bd      	mov	sp, r7
 8003762:	bd90      	pop	{r4, r7, pc}

08003764 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_PCD_SetAddress+0x1a>
 800377a:	2302      	movs	r3, #2
 800377c:	e013      	b.n	80037a6 <HAL_PCD_SetAddress+0x42>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f002 ff2c 	bl	80065f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	4608      	mov	r0, r1
 80037b8:	4611      	mov	r1, r2
 80037ba:	461a      	mov	r2, r3
 80037bc:	4603      	mov	r3, r0
 80037be:	70fb      	strb	r3, [r7, #3]
 80037c0:	460b      	mov	r3, r1
 80037c2:	803b      	strh	r3, [r7, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	da0f      	bge.n	80037f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	f003 020f 	and.w	r2, r3, #15
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	3338      	adds	r3, #56	; 0x38
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4413      	add	r3, r2
 80037e8:	3304      	adds	r3, #4
 80037ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	705a      	strb	r2, [r3, #1]
 80037f2:	e00f      	b.n	8003814 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	f003 020f 	and.w	r2, r3, #15
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	3304      	adds	r3, #4
 800380c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	b2da      	uxtb	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003820:	883a      	ldrh	r2, [r7, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	78ba      	ldrb	r2, [r7, #2]
 800382a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	785b      	ldrb	r3, [r3, #1]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800383e:	78bb      	ldrb	r3, [r7, #2]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d102      	bne.n	800384a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_PCD_EP_Open+0xaa>
 8003854:	2302      	movs	r3, #2
 8003856:	e00e      	b.n	8003876 <HAL_PCD_EP_Open+0xc8>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68f9      	ldr	r1, [r7, #12]
 8003866:	4618      	mov	r0, r3
 8003868:	f001 ffac 	bl	80057c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003874:	7afb      	ldrb	r3, [r7, #11]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	460b      	mov	r3, r1
 8003888:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800388a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800388e:	2b00      	cmp	r3, #0
 8003890:	da0f      	bge.n	80038b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	f003 020f 	and.w	r2, r3, #15
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	3338      	adds	r3, #56	; 0x38
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	705a      	strb	r2, [r3, #1]
 80038b0:	e00f      	b.n	80038d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	f003 020f 	and.w	r2, r3, #15
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	3304      	adds	r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_PCD_EP_Close+0x6e>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e00e      	b.n	800390a <HAL_PCD_EP_Close+0x8c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68f9      	ldr	r1, [r7, #12]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 ffea 	bl	80058d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	460b      	mov	r3, r1
 8003920:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003922:	7afb      	ldrb	r3, [r7, #11]
 8003924:	f003 020f 	and.w	r2, r3, #15
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	3304      	adds	r3, #4
 800393a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2200      	movs	r2, #0
 800394c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003954:	7afb      	ldrb	r3, [r7, #11]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	b2da      	uxtb	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d102      	bne.n	800396e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800396e:	7afb      	ldrb	r3, [r7, #11]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	2b00      	cmp	r3, #0
 8003976:	d109      	bne.n	800398c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	6979      	ldr	r1, [r7, #20]
 8003986:	f002 fac9 	bl	8005f1c <USB_EP0StartXfer>
 800398a:	e008      	b.n	800399e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	6979      	ldr	r1, [r7, #20]
 800399a:	f002 f877 	bl	8005a8c <USB_EPStartXfer>
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 020f 	and.w	r2, r3, #15
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	460b      	mov	r3, r1
 80039e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e8:	7afb      	ldrb	r3, [r7, #11]
 80039ea:	f003 020f 	and.w	r2, r3, #15
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	3338      	adds	r3, #56	; 0x38
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	3304      	adds	r3, #4
 80039fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2201      	movs	r2, #1
 8003a16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a18:	7afb      	ldrb	r3, [r7, #11]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d102      	bne.n	8003a32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a32:	7afb      	ldrb	r3, [r7, #11]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	6979      	ldr	r1, [r7, #20]
 8003a4a:	f002 fa67 	bl	8005f1c <USB_EP0StartXfer>
 8003a4e:	e008      	b.n	8003a62 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6979      	ldr	r1, [r7, #20]
 8003a5e:	f002 f815 	bl	8005a8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	f003 020f 	and.w	r2, r3, #15
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d901      	bls.n	8003a8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e050      	b.n	8003b2c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	da0f      	bge.n	8003ab2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	f003 020f 	and.w	r2, r3, #15
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	3338      	adds	r3, #56	; 0x38
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	705a      	strb	r2, [r3, #1]
 8003ab0:	e00d      	b.n	8003ace <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_PCD_EP_SetStall+0x82>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e01e      	b.n	8003b2c <HAL_PCD_EP_SetStall+0xc0>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68f9      	ldr	r1, [r7, #12]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f002 fca5 	bl	800644c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	b2d9      	uxtb	r1, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f002 fe95 	bl	800684c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	f003 020f 	and.w	r2, r3, #15
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d901      	bls.n	8003b52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e042      	b.n	8003bd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	da0f      	bge.n	8003b7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	f003 020f 	and.w	r2, r3, #15
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	3338      	adds	r3, #56	; 0x38
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3304      	adds	r3, #4
 8003b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	705a      	strb	r2, [r3, #1]
 8003b78:	e00f      	b.n	8003b9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	f003 020f 	and.w	r2, r3, #15
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4413      	add	r3, r2
 8003b90:	3304      	adds	r3, #4
 8003b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_PCD_EP_ClrStall+0x86>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e00e      	b.n	8003bd8 <HAL_PCD_EP_ClrStall+0xa4>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f002 fcad 	bl	8006528 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	da0c      	bge.n	8003c0e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	f003 020f 	and.w	r2, r3, #15
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	3338      	adds	r3, #56	; 0x38
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4413      	add	r3, r2
 8003c08:	3304      	adds	r3, #4
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e00c      	b.n	8003c28 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	f003 020f 	and.w	r2, r3, #15
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	3304      	adds	r3, #4
 8003c26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68f9      	ldr	r1, [r7, #12]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f002 facc 	bl	80061cc <USB_EPStopXfer>
 8003c34:	4603      	mov	r3, r0
 8003c36:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c38:	7afb      	ldrb	r3, [r7, #11]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b08a      	sub	sp, #40	; 0x28
 8003c46:	af02      	add	r7, sp, #8
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	3338      	adds	r3, #56	; 0x38
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	3304      	adds	r3, #4
 8003c68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1a      	ldr	r2, [r3, #32]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d901      	bls.n	8003c7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e06c      	b.n	8003d54 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d902      	bls.n	8003c96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3303      	adds	r3, #3
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c9e:	e02b      	b.n	8003cf8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d902      	bls.n	8003cbc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	3303      	adds	r3, #3
 8003cc0:	089b      	lsrs	r3, r3, #2
 8003cc2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6919      	ldr	r1, [r3, #16]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	4603      	mov	r3, r0
 8003cda:	6978      	ldr	r0, [r7, #20]
 8003cdc:	f002 fb20 	bl	8006320 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	441a      	add	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d809      	bhi.n	8003d22 <PCD_WriteEmptyTxFifo+0xe0>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a1a      	ldr	r2, [r3, #32]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d203      	bcs.n	8003d22 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1be      	bne.n	8003ca0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d811      	bhi.n	8003d52 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	2201      	movs	r2, #1
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	6939      	ldr	r1, [r7, #16]
 8003d4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d4e:	4013      	ands	r3, r2
 8003d50:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	333c      	adds	r3, #60	; 0x3c
 8003d74:	3304      	adds	r3, #4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d17b      	bne.n	8003e8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4a61      	ldr	r2, [pc, #388]	; (8003f24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	f240 80b9 	bls.w	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80b3 	beq.w	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc4:	6093      	str	r3, [r2, #8]
 8003dc6:	e0a7      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dde:	461a      	mov	r2, r3
 8003de0:	2320      	movs	r3, #32
 8003de2:	6093      	str	r3, [r2, #8]
 8003de4:	e098      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f040 8093 	bne.w	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	4a4b      	ldr	r2, [pc, #300]	; (8003f24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d90f      	bls.n	8003e1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e10:	461a      	mov	r2, r3
 8003e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e16:	6093      	str	r3, [r2, #8]
 8003e18:	e07e      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	0159      	lsls	r1, r3, #5
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	440b      	add	r3, r1
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e46:	1ad2      	subs	r2, r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d114      	bne.n	8003e7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e64:	461a      	mov	r2, r3
 8003e66:	2101      	movs	r1, #1
 8003e68:	f002 fcf0 	bl	800684c <USB_EP0_OutStart>
 8003e6c:	e006      	b.n	8003e7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	441a      	add	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f004 ff3c 	bl	8008d00 <HAL_PCD_DataOutStageCallback>
 8003e88:	e046      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4a26      	ldr	r2, [pc, #152]	; (8003f28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d124      	bne.n	8003edc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eae:	6093      	str	r3, [r2, #8]
 8003eb0:	e032      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2320      	movs	r3, #32
 8003ecc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f004 ff13 	bl	8008d00 <HAL_PCD_DataOutStageCallback>
 8003eda:	e01d      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d114      	bne.n	8003f0c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d108      	bne.n	8003f0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f04:	461a      	mov	r2, r3
 8003f06:	2100      	movs	r1, #0
 8003f08:	f002 fca0 	bl	800684c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	4619      	mov	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f004 fef4 	bl	8008d00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	4f54300a 	.word	0x4f54300a
 8003f28:	4f54310a 	.word	0x4f54310a

08003f2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	333c      	adds	r3, #60	; 0x3c
 8003f44:	3304      	adds	r3, #4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d90e      	bls.n	8003f80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d009      	beq.n	8003f80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f004 feab 	bl	8008cdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d90c      	bls.n	8003fa8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d108      	bne.n	8003fa8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	f002 fc52 	bl	800684c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	4f54300a 	.word	0x4f54300a

08003fb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d107      	bne.n	8003fe6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fd6:	883b      	ldrh	r3, [r7, #0]
 8003fd8:	0419      	lsls	r1, r3, #16
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fe4:	e028      	b.n	8004038 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e00d      	b.n	8004016 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	3340      	adds	r3, #64	; 0x40
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	4413      	add	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	3301      	adds	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	3b01      	subs	r3, #1
 800401c:	429a      	cmp	r2, r3
 800401e:	d3ec      	bcc.n	8003ffa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004020:	883b      	ldrh	r3, [r7, #0]
 8004022:	0418      	lsls	r0, r3, #16
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	3b01      	subs	r3, #1
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	4302      	orrs	r2, r0
 8004030:	3340      	adds	r3, #64	; 0x40
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e267      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d075      	beq.n	800418a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409e:	4b88      	ldr	r3, [pc, #544]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d00c      	beq.n	80040c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040aa:	4b85      	ldr	r3, [pc, #532]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d112      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b6:	4b82      	ldr	r3, [pc, #520]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c2:	d10b      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	4b7e      	ldr	r3, [pc, #504]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d05b      	beq.n	8004188 <HAL_RCC_OscConfig+0x108>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d157      	bne.n	8004188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e242      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x74>
 80040e6:	4b76      	ldr	r3, [pc, #472]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a75      	ldr	r2, [pc, #468]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e01d      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x98>
 80040fe:	4b70      	ldr	r3, [pc, #448]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6f      	ldr	r2, [pc, #444]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b6d      	ldr	r3, [pc, #436]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6c      	ldr	r2, [pc, #432]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 8004118:	4b69      	ldr	r3, [pc, #420]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a68      	ldr	r2, [pc, #416]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b66      	ldr	r3, [pc, #408]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a65      	ldr	r2, [pc, #404]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fc fd08 	bl	8000b4c <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004140:	f7fc fd04 	bl	8000b4c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e207      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	4b5b      	ldr	r3, [pc, #364]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0xc0>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fc fcf4 	bl	8000b4c <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004168:	f7fc fcf0 	bl	8000b4c <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e1f3      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417a:	4b51      	ldr	r3, [pc, #324]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0xe8>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d063      	beq.n	800425e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004196:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a2:	4b47      	ldr	r3, [pc, #284]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d11c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ae:	4b44      	ldr	r3, [pc, #272]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d116      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ba:	4b41      	ldr	r3, [pc, #260]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d001      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e1c7      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d2:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4937      	ldr	r1, [pc, #220]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	e03a      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f0:	4b34      	ldr	r3, [pc, #208]	; (80042c4 <HAL_RCC_OscConfig+0x244>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fc fca9 	bl	8000b4c <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fc fca5 	bl	8000b4c <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1a8      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421c:	4b28      	ldr	r3, [pc, #160]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4925      	ldr	r1, [pc, #148]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	e015      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004232:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCC_OscConfig+0x244>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fc fc88 	bl	8000b4c <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004240:	f7fc fc84 	bl	8000b4c <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e187      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d036      	beq.n	80042d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <HAL_RCC_OscConfig+0x248>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fc fc68 	bl	8000b4c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004280:	f7fc fc64 	bl	8000b4c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e167      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x200>
 800429e:	e01b      	b.n	80042d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_RCC_OscConfig+0x248>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a6:	f7fc fc51 	bl	8000b4c <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ac:	e00e      	b.n	80042cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ae:	f7fc fc4d 	bl	8000b4c <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d907      	bls.n	80042cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e150      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	42470000 	.word	0x42470000
 80042c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	4b88      	ldr	r3, [pc, #544]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ea      	bne.n	80042ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8097 	beq.w	8004414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ea:	4b81      	ldr	r3, [pc, #516]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10f      	bne.n	8004316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	4b7d      	ldr	r3, [pc, #500]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4a7c      	ldr	r2, [pc, #496]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
 8004306:	4b7a      	ldr	r3, [pc, #488]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004316:	4b77      	ldr	r3, [pc, #476]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d118      	bne.n	8004354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004322:	4b74      	ldr	r3, [pc, #464]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a73      	ldr	r2, [pc, #460]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432e:	f7fc fc0d 	bl	8000b4c <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004336:	f7fc fc09 	bl	8000b4c <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e10c      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	4b6a      	ldr	r3, [pc, #424]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d106      	bne.n	800436a <HAL_RCC_OscConfig+0x2ea>
 800435c:	4b64      	ldr	r3, [pc, #400]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4a63      	ldr	r2, [pc, #396]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6713      	str	r3, [r2, #112]	; 0x70
 8004368:	e01c      	b.n	80043a4 <HAL_RCC_OscConfig+0x324>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b05      	cmp	r3, #5
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x30c>
 8004372:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	4a5e      	ldr	r2, [pc, #376]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004378:	f043 0304 	orr.w	r3, r3, #4
 800437c:	6713      	str	r3, [r2, #112]	; 0x70
 800437e:	4b5c      	ldr	r3, [pc, #368]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4a5b      	ldr	r2, [pc, #364]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	6713      	str	r3, [r2, #112]	; 0x70
 800438a:	e00b      	b.n	80043a4 <HAL_RCC_OscConfig+0x324>
 800438c:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	4a57      	ldr	r2, [pc, #348]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	6713      	str	r3, [r2, #112]	; 0x70
 8004398:	4b55      	ldr	r3, [pc, #340]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	4a54      	ldr	r2, [pc, #336]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800439e:	f023 0304 	bic.w	r3, r3, #4
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d015      	beq.n	80043d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fc fbce 	bl	8000b4c <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b4:	f7fc fbca 	bl	8000b4c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e0cb      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ca:	4b49      	ldr	r3, [pc, #292]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0ee      	beq.n	80043b4 <HAL_RCC_OscConfig+0x334>
 80043d6:	e014      	b.n	8004402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d8:	f7fc fbb8 	bl	8000b4c <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fc fbb4 	bl	8000b4c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e0b5      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f6:	4b3e      	ldr	r3, [pc, #248]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1ee      	bne.n	80043e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004408:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	4a38      	ldr	r2, [pc, #224]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800440e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004412:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80a1 	beq.w	8004560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800441e:	4b34      	ldr	r3, [pc, #208]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b08      	cmp	r3, #8
 8004428:	d05c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d141      	bne.n	80044b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <HAL_RCC_OscConfig+0x478>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fc fb88 	bl	8000b4c <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004440:	f7fc fb84 	bl	8000b4c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e087      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	3b01      	subs	r3, #1
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	491b      	ldr	r1, [pc, #108]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_RCC_OscConfig+0x478>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448e:	f7fc fb5d 	bl	8000b4c <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004496:	f7fc fb59 	bl	8000b4c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e05c      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a8:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x416>
 80044b4:	e054      	b.n	8004560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <HAL_RCC_OscConfig+0x478>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fc fb46 	bl	8000b4c <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c4:	f7fc fb42 	bl	8000b4c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e045      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x444>
 80044e2:	e03d      	b.n	8004560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e038      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40007000 	.word	0x40007000
 80044f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_RCC_OscConfig+0x4ec>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d028      	beq.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d121      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d11a      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800452c:	4013      	ands	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004534:	4293      	cmp	r3, r2
 8004536:	d111      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	3b01      	subs	r3, #1
 8004546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d107      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800

08004570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0cc      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004584:	4b68      	ldr	r3, [pc, #416]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d90c      	bls.n	80045ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b65      	ldr	r3, [pc, #404]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b63      	ldr	r3, [pc, #396]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0b8      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c4:	4b59      	ldr	r3, [pc, #356]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a58      	ldr	r2, [pc, #352]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045dc:	4b53      	ldr	r3, [pc, #332]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a52      	ldr	r2, [pc, #328]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	494d      	ldr	r1, [pc, #308]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d044      	beq.n	8004690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b47      	ldr	r3, [pc, #284]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d119      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e07f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d003      	beq.n	800462e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462a:	2b03      	cmp	r3, #3
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463e:	4b3b      	ldr	r3, [pc, #236]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e067      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464e:	4b37      	ldr	r3, [pc, #220]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4934      	ldr	r1, [pc, #208]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004660:	f7fc fa74 	bl	8000b4c <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fc fa70 	bl	8000b4c <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e04f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	4b2b      	ldr	r3, [pc, #172]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 020c 	and.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	429a      	cmp	r2, r3
 800468e:	d1eb      	bne.n	8004668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d20c      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b22      	ldr	r3, [pc, #136]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e032      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4916      	ldr	r1, [pc, #88]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	490e      	ldr	r1, [pc, #56]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046f6:	f000 f821 	bl	800473c <HAL_RCC_GetSysClockFreq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	490a      	ldr	r1, [pc, #40]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fc f9d4 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40023c00 	.word	0x40023c00
 800472c:	40023800 	.word	0x40023800
 8004730:	08009300 	.word	0x08009300
 8004734:	20000000 	.word	0x20000000
 8004738:	20000004 	.word	0x20000004

0800473c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800473c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004740:	b094      	sub	sp, #80	; 0x50
 8004742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	647b      	str	r3, [r7, #68]	; 0x44
 8004748:	2300      	movs	r3, #0
 800474a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800474c:	2300      	movs	r3, #0
 800474e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004754:	4b79      	ldr	r3, [pc, #484]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d00d      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x40>
 8004760:	2b08      	cmp	r3, #8
 8004762:	f200 80e1 	bhi.w	8004928 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x34>
 800476a:	2b04      	cmp	r3, #4
 800476c:	d003      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x3a>
 800476e:	e0db      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004770:	4b73      	ldr	r3, [pc, #460]	; (8004940 <HAL_RCC_GetSysClockFreq+0x204>)
 8004772:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004774:	e0db      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004776:	4b73      	ldr	r3, [pc, #460]	; (8004944 <HAL_RCC_GetSysClockFreq+0x208>)
 8004778:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800477a:	e0d8      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800477c:	4b6f      	ldr	r3, [pc, #444]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004784:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004786:	4b6d      	ldr	r3, [pc, #436]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d063      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004792:	4b6a      	ldr	r3, [pc, #424]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	2200      	movs	r2, #0
 800479a:	63bb      	str	r3, [r7, #56]	; 0x38
 800479c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30
 80047a6:	2300      	movs	r3, #0
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
 80047aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047ae:	4622      	mov	r2, r4
 80047b0:	462b      	mov	r3, r5
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f04f 0100 	mov.w	r1, #0
 80047ba:	0159      	lsls	r1, r3, #5
 80047bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c0:	0150      	lsls	r0, r2, #5
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4621      	mov	r1, r4
 80047c8:	1a51      	subs	r1, r2, r1
 80047ca:	6139      	str	r1, [r7, #16]
 80047cc:	4629      	mov	r1, r5
 80047ce:	eb63 0301 	sbc.w	r3, r3, r1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047e0:	4659      	mov	r1, fp
 80047e2:	018b      	lsls	r3, r1, #6
 80047e4:	4651      	mov	r1, sl
 80047e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ea:	4651      	mov	r1, sl
 80047ec:	018a      	lsls	r2, r1, #6
 80047ee:	4651      	mov	r1, sl
 80047f0:	ebb2 0801 	subs.w	r8, r2, r1
 80047f4:	4659      	mov	r1, fp
 80047f6:	eb63 0901 	sbc.w	r9, r3, r1
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800480a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800480e:	4690      	mov	r8, r2
 8004810:	4699      	mov	r9, r3
 8004812:	4623      	mov	r3, r4
 8004814:	eb18 0303 	adds.w	r3, r8, r3
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	462b      	mov	r3, r5
 800481c:	eb49 0303 	adc.w	r3, r9, r3
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800482e:	4629      	mov	r1, r5
 8004830:	024b      	lsls	r3, r1, #9
 8004832:	4621      	mov	r1, r4
 8004834:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004838:	4621      	mov	r1, r4
 800483a:	024a      	lsls	r2, r1, #9
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004842:	2200      	movs	r2, #0
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
 8004846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800484c:	f7fb fcc4 	bl	80001d8 <__aeabi_uldivmod>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4613      	mov	r3, r2
 8004856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004858:	e058      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485a:	4b38      	ldr	r3, [pc, #224]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	2200      	movs	r2, #0
 8004862:	4618      	mov	r0, r3
 8004864:	4611      	mov	r1, r2
 8004866:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	2300      	movs	r3, #0
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
 8004870:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004874:	4642      	mov	r2, r8
 8004876:	464b      	mov	r3, r9
 8004878:	f04f 0000 	mov.w	r0, #0
 800487c:	f04f 0100 	mov.w	r1, #0
 8004880:	0159      	lsls	r1, r3, #5
 8004882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004886:	0150      	lsls	r0, r2, #5
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4641      	mov	r1, r8
 800488e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004892:	4649      	mov	r1, r9
 8004894:	eb63 0b01 	sbc.w	fp, r3, r1
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048ac:	ebb2 040a 	subs.w	r4, r2, sl
 80048b0:	eb63 050b 	sbc.w	r5, r3, fp
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	00eb      	lsls	r3, r5, #3
 80048be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048c2:	00e2      	lsls	r2, r4, #3
 80048c4:	4614      	mov	r4, r2
 80048c6:	461d      	mov	r5, r3
 80048c8:	4643      	mov	r3, r8
 80048ca:	18e3      	adds	r3, r4, r3
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	464b      	mov	r3, r9
 80048d0:	eb45 0303 	adc.w	r3, r5, r3
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048e2:	4629      	mov	r1, r5
 80048e4:	028b      	lsls	r3, r1, #10
 80048e6:	4621      	mov	r1, r4
 80048e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048ec:	4621      	mov	r1, r4
 80048ee:	028a      	lsls	r2, r1, #10
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f6:	2200      	movs	r2, #0
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	61fa      	str	r2, [r7, #28]
 80048fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004900:	f7fb fc6a 	bl	80001d8 <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4613      	mov	r3, r2
 800490a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	3301      	adds	r3, #1
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800491c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800491e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004926:	e002      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCC_GetSysClockFreq+0x204>)
 800492a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800492c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800492e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004930:	4618      	mov	r0, r3
 8004932:	3750      	adds	r7, #80	; 0x50
 8004934:	46bd      	mov	sp, r7
 8004936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	00f42400 	.word	0x00f42400
 8004944:	007a1200 	.word	0x007a1200

08004948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <HAL_RCC_GetHCLKFreq+0x14>)
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000000 	.word	0x20000000

08004960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004964:	f7ff fff0 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	0a9b      	lsrs	r3, r3, #10
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4903      	ldr	r1, [pc, #12]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40023800 	.word	0x40023800
 8004984:	08009310 	.word	0x08009310

08004988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800498c:	f7ff ffdc 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004990:	4602      	mov	r2, r0
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	0b5b      	lsrs	r3, r3, #13
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	4903      	ldr	r1, [pc, #12]	; (80049ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40023800 	.word	0x40023800
 80049ac:	08009310 	.word	0x08009310

080049b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e041      	b.n	8004a46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fb ff66 	bl	80008a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f000 f82e 	bl	8004a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a34      	ldr	r2, [pc, #208]	; (8004b34 <TIM_Base_SetConfig+0xe4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00f      	beq.n	8004a88 <TIM_Base_SetConfig+0x38>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6e:	d00b      	beq.n	8004a88 <TIM_Base_SetConfig+0x38>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a31      	ldr	r2, [pc, #196]	; (8004b38 <TIM_Base_SetConfig+0xe8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d007      	beq.n	8004a88 <TIM_Base_SetConfig+0x38>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a30      	ldr	r2, [pc, #192]	; (8004b3c <TIM_Base_SetConfig+0xec>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_Base_SetConfig+0x38>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <TIM_Base_SetConfig+0xf0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d108      	bne.n	8004a9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a25      	ldr	r2, [pc, #148]	; (8004b34 <TIM_Base_SetConfig+0xe4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01b      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa8:	d017      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <TIM_Base_SetConfig+0xe8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <TIM_Base_SetConfig+0xec>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00f      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a20      	ldr	r2, [pc, #128]	; (8004b40 <TIM_Base_SetConfig+0xf0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <TIM_Base_SetConfig+0xf4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <TIM_Base_SetConfig+0xf8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1d      	ldr	r2, [pc, #116]	; (8004b4c <TIM_Base_SetConfig+0xfc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d108      	bne.n	8004aec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <TIM_Base_SetConfig+0xe4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d103      	bne.n	8004b20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	615a      	str	r2, [r3, #20]
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800

08004b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e03f      	b.n	8004be2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fb feb8 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	; 0x24
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f829 	bl	8004bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf0:	b0c0      	sub	sp, #256	; 0x100
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c08:	68d9      	ldr	r1, [r3, #12]
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	ea40 0301 	orr.w	r3, r0, r1
 8004c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c44:	f021 010c 	bic.w	r1, r1, #12
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c52:	430b      	orrs	r3, r1
 8004c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c66:	6999      	ldr	r1, [r3, #24]
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	ea40 0301 	orr.w	r3, r0, r1
 8004c72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b8f      	ldr	r3, [pc, #572]	; (8004eb8 <UART_SetConfig+0x2cc>)
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d005      	beq.n	8004c8c <UART_SetConfig+0xa0>
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b8d      	ldr	r3, [pc, #564]	; (8004ebc <UART_SetConfig+0x2d0>)
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d104      	bne.n	8004c96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c8c:	f7ff fe7c 	bl	8004988 <HAL_RCC_GetPCLK2Freq>
 8004c90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c94:	e003      	b.n	8004c9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c96:	f7ff fe63 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 8004c9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca8:	f040 810c 	bne.w	8004ec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	1891      	adds	r1, r2, r2
 8004cc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cc6:	415b      	adcs	r3, r3
 8004cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cce:	4621      	mov	r1, r4
 8004cd0:	eb12 0801 	adds.w	r8, r2, r1
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	eb43 0901 	adc.w	r9, r3, r1
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cee:	4690      	mov	r8, r2
 8004cf0:	4699      	mov	r9, r3
 8004cf2:	4623      	mov	r3, r4
 8004cf4:	eb18 0303 	adds.w	r3, r8, r3
 8004cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cfc:	462b      	mov	r3, r5
 8004cfe:	eb49 0303 	adc.w	r3, r9, r3
 8004d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	18db      	adds	r3, r3, r3
 8004d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d20:	4613      	mov	r3, r2
 8004d22:	eb42 0303 	adc.w	r3, r2, r3
 8004d26:	657b      	str	r3, [r7, #84]	; 0x54
 8004d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d30:	f7fb fa52 	bl	80001d8 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4b61      	ldr	r3, [pc, #388]	; (8004ec0 <UART_SetConfig+0x2d4>)
 8004d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	011c      	lsls	r4, r3, #4
 8004d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d54:	4642      	mov	r2, r8
 8004d56:	464b      	mov	r3, r9
 8004d58:	1891      	adds	r1, r2, r2
 8004d5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d5c:	415b      	adcs	r3, r3
 8004d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d64:	4641      	mov	r1, r8
 8004d66:	eb12 0a01 	adds.w	sl, r2, r1
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d84:	4692      	mov	sl, r2
 8004d86:	469b      	mov	fp, r3
 8004d88:	4643      	mov	r3, r8
 8004d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d92:	464b      	mov	r3, r9
 8004d94:	eb4b 0303 	adc.w	r3, fp, r3
 8004d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004da8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004dac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004db0:	460b      	mov	r3, r1
 8004db2:	18db      	adds	r3, r3, r3
 8004db4:	643b      	str	r3, [r7, #64]	; 0x40
 8004db6:	4613      	mov	r3, r2
 8004db8:	eb42 0303 	adc.w	r3, r2, r3
 8004dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dc6:	f7fb fa07 	bl	80001d8 <__aeabi_uldivmod>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4611      	mov	r1, r2
 8004dd0:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <UART_SetConfig+0x2d4>)
 8004dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	2264      	movs	r2, #100	; 0x64
 8004dda:	fb02 f303 	mul.w	r3, r2, r3
 8004dde:	1acb      	subs	r3, r1, r3
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004de6:	4b36      	ldr	r3, [pc, #216]	; (8004ec0 <UART_SetConfig+0x2d4>)
 8004de8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004df4:	441c      	add	r4, r3
 8004df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e08:	4642      	mov	r2, r8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	1891      	adds	r1, r2, r2
 8004e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e10:	415b      	adcs	r3, r3
 8004e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e18:	4641      	mov	r1, r8
 8004e1a:	1851      	adds	r1, r2, r1
 8004e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8004e1e:	4649      	mov	r1, r9
 8004e20:	414b      	adcs	r3, r1
 8004e22:	637b      	str	r3, [r7, #52]	; 0x34
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e30:	4659      	mov	r1, fp
 8004e32:	00cb      	lsls	r3, r1, #3
 8004e34:	4651      	mov	r1, sl
 8004e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e3a:	4651      	mov	r1, sl
 8004e3c:	00ca      	lsls	r2, r1, #3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	4603      	mov	r3, r0
 8004e44:	4642      	mov	r2, r8
 8004e46:	189b      	adds	r3, r3, r2
 8004e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	460a      	mov	r2, r1
 8004e50:	eb42 0303 	adc.w	r3, r2, r3
 8004e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	18db      	adds	r3, r3, r3
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e72:	4613      	mov	r3, r2
 8004e74:	eb42 0303 	adc.w	r3, r2, r3
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e82:	f7fb f9a9 	bl	80001d8 <__aeabi_uldivmod>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <UART_SetConfig+0x2d4>)
 8004e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	2164      	movs	r1, #100	; 0x64
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	3332      	adds	r3, #50	; 0x32
 8004e9e:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <UART_SetConfig+0x2d4>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	f003 0207 	and.w	r2, r3, #7
 8004eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4422      	add	r2, r4
 8004eb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eb4:	e106      	b.n	80050c4 <UART_SetConfig+0x4d8>
 8004eb6:	bf00      	nop
 8004eb8:	40011000 	.word	0x40011000
 8004ebc:	40011400 	.word	0x40011400
 8004ec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ece:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ed6:	4642      	mov	r2, r8
 8004ed8:	464b      	mov	r3, r9
 8004eda:	1891      	adds	r1, r2, r2
 8004edc:	6239      	str	r1, [r7, #32]
 8004ede:	415b      	adcs	r3, r3
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ee6:	4641      	mov	r1, r8
 8004ee8:	1854      	adds	r4, r2, r1
 8004eea:	4649      	mov	r1, r9
 8004eec:	eb43 0501 	adc.w	r5, r3, r1
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	00eb      	lsls	r3, r5, #3
 8004efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004efe:	00e2      	lsls	r2, r4, #3
 8004f00:	4614      	mov	r4, r2
 8004f02:	461d      	mov	r5, r3
 8004f04:	4643      	mov	r3, r8
 8004f06:	18e3      	adds	r3, r4, r3
 8004f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	eb45 0303 	adc.w	r3, r5, r3
 8004f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f32:	4629      	mov	r1, r5
 8004f34:	008b      	lsls	r3, r1, #2
 8004f36:	4621      	mov	r1, r4
 8004f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	008a      	lsls	r2, r1, #2
 8004f40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f44:	f7fb f948 	bl	80001d8 <__aeabi_uldivmod>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4b60      	ldr	r3, [pc, #384]	; (80050d0 <UART_SetConfig+0x4e4>)
 8004f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	011c      	lsls	r4, r3, #4
 8004f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f68:	4642      	mov	r2, r8
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	1891      	adds	r1, r2, r2
 8004f6e:	61b9      	str	r1, [r7, #24]
 8004f70:	415b      	adcs	r3, r3
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f78:	4641      	mov	r1, r8
 8004f7a:	1851      	adds	r1, r2, r1
 8004f7c:	6139      	str	r1, [r7, #16]
 8004f7e:	4649      	mov	r1, r9
 8004f80:	414b      	adcs	r3, r1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f90:	4659      	mov	r1, fp
 8004f92:	00cb      	lsls	r3, r1, #3
 8004f94:	4651      	mov	r1, sl
 8004f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f9a:	4651      	mov	r1, sl
 8004f9c:	00ca      	lsls	r2, r1, #3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	189b      	adds	r3, r3, r2
 8004fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fac:	464b      	mov	r3, r9
 8004fae:	460a      	mov	r2, r1
 8004fb0:	eb42 0303 	adc.w	r3, r2, r3
 8004fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fd0:	4649      	mov	r1, r9
 8004fd2:	008b      	lsls	r3, r1, #2
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fda:	4641      	mov	r1, r8
 8004fdc:	008a      	lsls	r2, r1, #2
 8004fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fe2:	f7fb f8f9 	bl	80001d8 <__aeabi_uldivmod>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4611      	mov	r1, r2
 8004fec:	4b38      	ldr	r3, [pc, #224]	; (80050d0 <UART_SetConfig+0x4e4>)
 8004fee:	fba3 2301 	umull	r2, r3, r3, r1
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	2264      	movs	r2, #100	; 0x64
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	1acb      	subs	r3, r1, r3
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	3332      	adds	r3, #50	; 0x32
 8005000:	4a33      	ldr	r2, [pc, #204]	; (80050d0 <UART_SetConfig+0x4e4>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800500c:	441c      	add	r4, r3
 800500e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005012:	2200      	movs	r2, #0
 8005014:	673b      	str	r3, [r7, #112]	; 0x70
 8005016:	677a      	str	r2, [r7, #116]	; 0x74
 8005018:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800501c:	4642      	mov	r2, r8
 800501e:	464b      	mov	r3, r9
 8005020:	1891      	adds	r1, r2, r2
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	415b      	adcs	r3, r3
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800502c:	4641      	mov	r1, r8
 800502e:	1851      	adds	r1, r2, r1
 8005030:	6039      	str	r1, [r7, #0]
 8005032:	4649      	mov	r1, r9
 8005034:	414b      	adcs	r3, r1
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005044:	4659      	mov	r1, fp
 8005046:	00cb      	lsls	r3, r1, #3
 8005048:	4651      	mov	r1, sl
 800504a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800504e:	4651      	mov	r1, sl
 8005050:	00ca      	lsls	r2, r1, #3
 8005052:	4610      	mov	r0, r2
 8005054:	4619      	mov	r1, r3
 8005056:	4603      	mov	r3, r0
 8005058:	4642      	mov	r2, r8
 800505a:	189b      	adds	r3, r3, r2
 800505c:	66bb      	str	r3, [r7, #104]	; 0x68
 800505e:	464b      	mov	r3, r9
 8005060:	460a      	mov	r2, r1
 8005062:	eb42 0303 	adc.w	r3, r2, r3
 8005066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	663b      	str	r3, [r7, #96]	; 0x60
 8005072:	667a      	str	r2, [r7, #100]	; 0x64
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005080:	4649      	mov	r1, r9
 8005082:	008b      	lsls	r3, r1, #2
 8005084:	4641      	mov	r1, r8
 8005086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800508a:	4641      	mov	r1, r8
 800508c:	008a      	lsls	r2, r1, #2
 800508e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005092:	f7fb f8a1 	bl	80001d8 <__aeabi_uldivmod>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <UART_SetConfig+0x4e4>)
 800509c:	fba3 1302 	umull	r1, r3, r3, r2
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	2164      	movs	r1, #100	; 0x64
 80050a4:	fb01 f303 	mul.w	r3, r1, r3
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	3332      	adds	r3, #50	; 0x32
 80050ae:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <UART_SetConfig+0x4e4>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	f003 020f 	and.w	r2, r3, #15
 80050ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4422      	add	r2, r4
 80050c2:	609a      	str	r2, [r3, #8]
}
 80050c4:	bf00      	nop
 80050c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050ca:	46bd      	mov	sp, r7
 80050cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d0:	51eb851f 	.word	0x51eb851f

080050d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050d4:	b084      	sub	sp, #16
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	f107 001c 	add.w	r0, r7, #28
 80050e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d122      	bne.n	8005132 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005116:	2b01      	cmp	r3, #1
 8005118:	d105      	bne.n	8005126 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f001 fbee 	bl	8006908 <USB_CoreReset>
 800512c:	4603      	mov	r3, r0
 800512e:	73fb      	strb	r3, [r7, #15]
 8005130:	e01a      	b.n	8005168 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f001 fbe2 	bl	8006908 <USB_CoreReset>
 8005144:	4603      	mov	r3, r0
 8005146:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
 800515a:	e005      	b.n	8005168 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	2b01      	cmp	r3, #1
 800516c:	d10b      	bne.n	8005186 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f043 0206 	orr.w	r2, r3, #6
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f043 0220 	orr.w	r2, r3, #32
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005186:	7bfb      	ldrb	r3, [r7, #15]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005192:	b004      	add	sp, #16
 8005194:	4770      	bx	lr
	...

08005198 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	4613      	mov	r3, r2
 80051a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d165      	bne.n	8005278 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4a41      	ldr	r2, [pc, #260]	; (80052b4 <USB_SetTurnaroundTime+0x11c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d906      	bls.n	80051c2 <USB_SetTurnaroundTime+0x2a>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4a40      	ldr	r2, [pc, #256]	; (80052b8 <USB_SetTurnaroundTime+0x120>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d202      	bcs.n	80051c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051bc:	230f      	movs	r3, #15
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	e062      	b.n	8005288 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4a3c      	ldr	r2, [pc, #240]	; (80052b8 <USB_SetTurnaroundTime+0x120>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d306      	bcc.n	80051d8 <USB_SetTurnaroundTime+0x40>
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4a3b      	ldr	r2, [pc, #236]	; (80052bc <USB_SetTurnaroundTime+0x124>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d202      	bcs.n	80051d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051d2:	230e      	movs	r3, #14
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	e057      	b.n	8005288 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4a38      	ldr	r2, [pc, #224]	; (80052bc <USB_SetTurnaroundTime+0x124>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d306      	bcc.n	80051ee <USB_SetTurnaroundTime+0x56>
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4a37      	ldr	r2, [pc, #220]	; (80052c0 <USB_SetTurnaroundTime+0x128>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d202      	bcs.n	80051ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051e8:	230d      	movs	r3, #13
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e04c      	b.n	8005288 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4a33      	ldr	r2, [pc, #204]	; (80052c0 <USB_SetTurnaroundTime+0x128>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d306      	bcc.n	8005204 <USB_SetTurnaroundTime+0x6c>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4a32      	ldr	r2, [pc, #200]	; (80052c4 <USB_SetTurnaroundTime+0x12c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d802      	bhi.n	8005204 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051fe:	230c      	movs	r3, #12
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e041      	b.n	8005288 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4a2f      	ldr	r2, [pc, #188]	; (80052c4 <USB_SetTurnaroundTime+0x12c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d906      	bls.n	800521a <USB_SetTurnaroundTime+0x82>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4a2e      	ldr	r2, [pc, #184]	; (80052c8 <USB_SetTurnaroundTime+0x130>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d802      	bhi.n	800521a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005214:	230b      	movs	r3, #11
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	e036      	b.n	8005288 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4a2a      	ldr	r2, [pc, #168]	; (80052c8 <USB_SetTurnaroundTime+0x130>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d906      	bls.n	8005230 <USB_SetTurnaroundTime+0x98>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a29      	ldr	r2, [pc, #164]	; (80052cc <USB_SetTurnaroundTime+0x134>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d802      	bhi.n	8005230 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800522a:	230a      	movs	r3, #10
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e02b      	b.n	8005288 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4a26      	ldr	r2, [pc, #152]	; (80052cc <USB_SetTurnaroundTime+0x134>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d906      	bls.n	8005246 <USB_SetTurnaroundTime+0xae>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <USB_SetTurnaroundTime+0x138>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d202      	bcs.n	8005246 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005240:	2309      	movs	r3, #9
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	e020      	b.n	8005288 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <USB_SetTurnaroundTime+0x138>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d306      	bcc.n	800525c <USB_SetTurnaroundTime+0xc4>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4a20      	ldr	r2, [pc, #128]	; (80052d4 <USB_SetTurnaroundTime+0x13c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d802      	bhi.n	800525c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005256:	2308      	movs	r3, #8
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e015      	b.n	8005288 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <USB_SetTurnaroundTime+0x13c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d906      	bls.n	8005272 <USB_SetTurnaroundTime+0xda>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <USB_SetTurnaroundTime+0x140>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d202      	bcs.n	8005272 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800526c:	2307      	movs	r3, #7
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	e00a      	b.n	8005288 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005272:	2306      	movs	r3, #6
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	e007      	b.n	8005288 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800527e:	2309      	movs	r3, #9
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e001      	b.n	8005288 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005284:	2309      	movs	r3, #9
 8005286:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	029b      	lsls	r3, r3, #10
 800529c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052a0:	431a      	orrs	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	00d8acbf 	.word	0x00d8acbf
 80052b8:	00e4e1c0 	.word	0x00e4e1c0
 80052bc:	00f42400 	.word	0x00f42400
 80052c0:	01067380 	.word	0x01067380
 80052c4:	011a499f 	.word	0x011a499f
 80052c8:	01312cff 	.word	0x01312cff
 80052cc:	014ca43f 	.word	0x014ca43f
 80052d0:	016e3600 	.word	0x016e3600
 80052d4:	01a6ab1f 	.word	0x01a6ab1f
 80052d8:	01e84800 	.word	0x01e84800

080052dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f043 0201 	orr.w	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f023 0201 	bic.w	r2, r3, #1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d115      	bne.n	800536e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800534e:	2001      	movs	r0, #1
 8005350:	f7fb fc08 	bl	8000b64 <HAL_Delay>
      ms++;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f001 fa45 	bl	80067ea <USB_GetMode>
 8005360:	4603      	mov	r3, r0
 8005362:	2b01      	cmp	r3, #1
 8005364:	d01e      	beq.n	80053a4 <USB_SetCurrentMode+0x84>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b31      	cmp	r3, #49	; 0x31
 800536a:	d9f0      	bls.n	800534e <USB_SetCurrentMode+0x2e>
 800536c:	e01a      	b.n	80053a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d115      	bne.n	80053a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005380:	2001      	movs	r0, #1
 8005382:	f7fb fbef 	bl	8000b64 <HAL_Delay>
      ms++;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3301      	adds	r3, #1
 800538a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f001 fa2c 	bl	80067ea <USB_GetMode>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <USB_SetCurrentMode+0x84>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b31      	cmp	r3, #49	; 0x31
 800539c:	d9f0      	bls.n	8005380 <USB_SetCurrentMode+0x60>
 800539e:	e001      	b.n	80053a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e005      	b.n	80053b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b32      	cmp	r3, #50	; 0x32
 80053a8:	d101      	bne.n	80053ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053b8:	b084      	sub	sp, #16
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053d2:	2300      	movs	r3, #0
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	e009      	b.n	80053ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	3340      	adds	r3, #64	; 0x40
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	2200      	movs	r2, #0
 80053e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	3301      	adds	r3, #1
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2b0e      	cmp	r3, #14
 80053f0:	d9f2      	bls.n	80053d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d11c      	bne.n	8005432 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005406:	f043 0302 	orr.w	r3, r3, #2
 800540a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	639a      	str	r2, [r3, #56]	; 0x38
 8005430:	e00b      	b.n	800544a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005450:	461a      	mov	r2, r3
 8005452:	2300      	movs	r3, #0
 8005454:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545c:	4619      	mov	r1, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005464:	461a      	mov	r2, r3
 8005466:	680b      	ldr	r3, [r1, #0]
 8005468:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	2b01      	cmp	r3, #1
 800546e:	d10c      	bne.n	800548a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005476:	2100      	movs	r1, #0
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f965 	bl	8005748 <USB_SetDevSpeed>
 800547e:	e008      	b.n	8005492 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005480:	2101      	movs	r1, #1
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f960 	bl	8005748 <USB_SetDevSpeed>
 8005488:	e003      	b.n	8005492 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800548a:	2103      	movs	r1, #3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f95b 	bl	8005748 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005492:	2110      	movs	r1, #16
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f8f3 	bl	8005680 <USB_FlushTxFifo>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f91f 	bl	80056e8 <USB_FlushRxFifo>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	461a      	mov	r2, r3
 80054bc:	2300      	movs	r3, #0
 80054be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c6:	461a      	mov	r2, r3
 80054c8:	2300      	movs	r3, #0
 80054ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	461a      	mov	r2, r3
 80054d4:	2300      	movs	r3, #0
 80054d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054d8:	2300      	movs	r3, #0
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	e043      	b.n	8005566 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f4:	d118      	bne.n	8005528 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	461a      	mov	r2, r3
 800550a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	e013      	b.n	800553a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551e:	461a      	mov	r2, r3
 8005520:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e008      	b.n	800553a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	461a      	mov	r2, r3
 8005536:	2300      	movs	r3, #0
 8005538:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	461a      	mov	r2, r3
 8005548:	2300      	movs	r3, #0
 800554a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	461a      	mov	r2, r3
 800555a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800555e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	3301      	adds	r3, #1
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	429a      	cmp	r2, r3
 800556c:	d3b7      	bcc.n	80054de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800556e:	2300      	movs	r3, #0
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	e043      	b.n	80055fc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800558a:	d118      	bne.n	80055be <USB_DevInit+0x206>
    {
      if (i == 0U)
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559e:	461a      	mov	r2, r3
 80055a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	e013      	b.n	80055d0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	461a      	mov	r2, r3
 80055b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	e008      	b.n	80055d0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	461a      	mov	r2, r3
 80055cc:	2300      	movs	r3, #0
 80055ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	461a      	mov	r2, r3
 80055de:	2300      	movs	r3, #0
 80055e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ee:	461a      	mov	r2, r3
 80055f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	3301      	adds	r3, #1
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	429a      	cmp	r2, r3
 8005602:	d3b7      	bcc.n	8005574 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005616:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005624:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	2b00      	cmp	r3, #0
 800562a:	d105      	bne.n	8005638 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f043 0210 	orr.w	r2, r3, #16
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699a      	ldr	r2, [r3, #24]
 800563c:	4b0f      	ldr	r3, [pc, #60]	; (800567c <USB_DevInit+0x2c4>)
 800563e:	4313      	orrs	r3, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f043 0208 	orr.w	r2, r3, #8
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005658:	2b01      	cmp	r3, #1
 800565a:	d107      	bne.n	800566c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005664:	f043 0304 	orr.w	r3, r3, #4
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005678:	b004      	add	sp, #16
 800567a:	4770      	bx	lr
 800567c:	803c3800 	.word	0x803c3800

08005680 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3301      	adds	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4a13      	ldr	r2, [pc, #76]	; (80056e4 <USB_FlushTxFifo+0x64>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d901      	bls.n	80056a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e01b      	b.n	80056d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	daf2      	bge.n	800568e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	019b      	lsls	r3, r3, #6
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4a08      	ldr	r2, [pc, #32]	; (80056e4 <USB_FlushTxFifo+0x64>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e006      	b.n	80056d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d0f0      	beq.n	80056b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	00030d40 	.word	0x00030d40

080056e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a11      	ldr	r2, [pc, #68]	; (8005744 <USB_FlushRxFifo+0x5c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e018      	b.n	8005738 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	daf2      	bge.n	80056f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2210      	movs	r2, #16
 8005716:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <USB_FlushRxFifo+0x5c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e006      	b.n	8005738 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b10      	cmp	r3, #16
 8005734:	d0f0      	beq.n	8005718 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	00030d40 	.word	0x00030d40

08005748 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800577a:	b480      	push	{r7}
 800577c:	b087      	sub	sp, #28
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 0306 	and.w	r3, r3, #6
 8005792:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d102      	bne.n	80057a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800579a:	2300      	movs	r3, #0
 800579c:	75fb      	strb	r3, [r7, #23]
 800579e:	e00a      	b.n	80057b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d002      	beq.n	80057ac <USB_GetDevSpeed+0x32>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b06      	cmp	r3, #6
 80057aa:	d102      	bne.n	80057b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057ac:	2302      	movs	r3, #2
 80057ae:	75fb      	strb	r3, [r7, #23]
 80057b0:	e001      	b.n	80057b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057b2:	230f      	movs	r3, #15
 80057b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d13a      	bne.n	8005856 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f003 030f 	and.w	r3, r3, #15
 80057f0:	2101      	movs	r1, #1
 80057f2:	fa01 f303 	lsl.w	r3, r1, r3
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	68f9      	ldr	r1, [r7, #12]
 80057fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057fe:	4313      	orrs	r3, r2
 8005800:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d155      	bne.n	80058c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	791b      	ldrb	r3, [r3, #4]
 8005832:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005834:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	059b      	lsls	r3, r3, #22
 800583a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800583c:	4313      	orrs	r3, r2
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	0151      	lsls	r1, r2, #5
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	440a      	add	r2, r1
 8005846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	e036      	b.n	80058c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	2101      	movs	r1, #1
 8005868:	fa01 f303 	lsl.w	r3, r1, r3
 800586c:	041b      	lsls	r3, r3, #16
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005874:	4313      	orrs	r3, r2
 8005876:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d11a      	bne.n	80058c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	791b      	ldrb	r3, [r3, #4]
 80058a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058aa:	430b      	orrs	r3, r1
 80058ac:	4313      	orrs	r3, r2
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	0151      	lsls	r1, r2, #5
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	440a      	add	r2, r1
 80058b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	785b      	ldrb	r3, [r3, #1]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d161      	bne.n	80059b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005906:	d11f      	bne.n	8005948 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	440a      	add	r2, r1
 800591e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005922:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005926:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005946:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	b29b      	uxth	r3, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005968:	4013      	ands	r3, r2
 800596a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	2101      	movs	r1, #1
 800597e:	fa01 f303 	lsl.w	r3, r1, r3
 8005982:	b29b      	uxth	r3, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800598c:	4013      	ands	r3, r2
 800598e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	0159      	lsls	r1, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	440b      	add	r3, r1
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	4619      	mov	r1, r3
 80059ac:	4b35      	ldr	r3, [pc, #212]	; (8005a84 <USB_DeactivateEndpoint+0x1b0>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]
 80059b2:	e060      	b.n	8005a76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ca:	d11f      	bne.n	8005a0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	0151      	lsls	r1, r2, #5
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	440a      	add	r2, r1
 80059e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	43db      	mvns	r3, r3
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	2101      	movs	r1, #1
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a50:	4013      	ands	r3, r2
 8005a52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	0159      	lsls	r1, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	440b      	add	r3, r1
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <USB_DeactivateEndpoint+0x1b4>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	ec337800 	.word	0xec337800
 8005a88:	eff37800 	.word	0xeff37800

08005a8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	; 0x28
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	4613      	mov	r3, r2
 8005a98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	f040 815c 	bne.w	8005d66 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d132      	bne.n	8005b1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ad4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ad8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	0151      	lsls	r1, r2, #5
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	440a      	add	r2, r1
 8005af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005af8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b14:	0cdb      	lsrs	r3, r3, #19
 8005b16:	04db      	lsls	r3, r3, #19
 8005b18:	6113      	str	r3, [r2, #16]
 8005b1a:	e074      	b.n	8005c06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b36:	0cdb      	lsrs	r3, r3, #19
 8005b38:	04db      	lsls	r3, r3, #19
 8005b3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6999      	ldr	r1, [r3, #24]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	440b      	add	r3, r1
 8005b78:	1e59      	subs	r1, r3, #1
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b82:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b84:	4b9d      	ldr	r3, [pc, #628]	; (8005dfc <USB_EPStartXfer+0x370>)
 8005b86:	400b      	ands	r3, r1
 8005b88:	69b9      	ldr	r1, [r7, #24]
 8005b8a:	0148      	lsls	r0, r1, #5
 8005b8c:	69f9      	ldr	r1, [r7, #28]
 8005b8e:	4401      	add	r1, r0
 8005b90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b94:	4313      	orrs	r3, r2
 8005b96:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bae:	69b9      	ldr	r1, [r7, #24]
 8005bb0:	0148      	lsls	r0, r1, #5
 8005bb2:	69f9      	ldr	r1, [r7, #28]
 8005bb4:	4401      	add	r1, r0
 8005bb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	791b      	ldrb	r3, [r3, #4]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d11f      	bne.n	8005c06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005be4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d14b      	bne.n	8005ca4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	461a      	mov	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	791b      	ldrb	r3, [r3, #4]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d128      	bne.n	8005c82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d110      	bne.n	8005c62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	e00f      	b.n	8005c82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e133      	b.n	8005f0c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	0151      	lsls	r1, r2, #5
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	440a      	add	r2, r1
 8005cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cc2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	791b      	ldrb	r3, [r3, #4]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d015      	beq.n	8005cf8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 811b 	beq.w	8005f0c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cec:	69f9      	ldr	r1, [r7, #28]
 8005cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	634b      	str	r3, [r1, #52]	; 0x34
 8005cf6:	e109      	b.n	8005f0c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d110      	bne.n	8005d2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	0151      	lsls	r1, r2, #5
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	e00f      	b.n	8005d4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6919      	ldr	r1, [r3, #16]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	781a      	ldrb	r2, [r3, #0]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	b298      	uxth	r0, r3
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fade 	bl	8006320 <USB_WritePacket>
 8005d64:	e0d2      	b.n	8005f0c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d80:	0cdb      	lsrs	r3, r3, #19
 8005d82:	04db      	lsls	r3, r3, #19
 8005d84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005da4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005da8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d126      	bne.n	8005e00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc8:	69b9      	ldr	r1, [r7, #24]
 8005dca:	0148      	lsls	r0, r1, #5
 8005dcc:	69f9      	ldr	r1, [r7, #28]
 8005dce:	4401      	add	r1, r0
 8005dd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005df6:	6113      	str	r3, [r2, #16]
 8005df8:	e03a      	b.n	8005e70 <USB_EPStartXfer+0x3e4>
 8005dfa:	bf00      	nop
 8005dfc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	699a      	ldr	r2, [r3, #24]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	1e5a      	subs	r2, r3, #1
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	8afa      	ldrh	r2, [r7, #22]
 8005e1c:	fb03 f202 	mul.w	r2, r3, r2
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	8afb      	ldrh	r3, [r7, #22]
 8005e34:	04d9      	lsls	r1, r3, #19
 8005e36:	4b38      	ldr	r3, [pc, #224]	; (8005f18 <USB_EPStartXfer+0x48c>)
 8005e38:	400b      	ands	r3, r1
 8005e3a:	69b9      	ldr	r1, [r7, #24]
 8005e3c:	0148      	lsls	r0, r1, #5
 8005e3e:	69f9      	ldr	r1, [r7, #28]
 8005e40:	4401      	add	r1, r0
 8005e42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e46:	4313      	orrs	r3, r2
 8005e48:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e60:	69b9      	ldr	r1, [r7, #24]
 8005e62:	0148      	lsls	r0, r1, #5
 8005e64:	69f9      	ldr	r1, [r7, #28]
 8005e66:	4401      	add	r1, r0
 8005e68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10d      	bne.n	8005e92 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6919      	ldr	r1, [r3, #16]
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8e:	460a      	mov	r2, r1
 8005e90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	791b      	ldrb	r3, [r3, #4]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d128      	bne.n	8005eec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d110      	bne.n	8005ecc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	e00f      	b.n	8005eec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	1ff80000 	.word	0x1ff80000

08005f1c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	4613      	mov	r3, r2
 8005f28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	f040 80ce 	bne.w	80060da <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d132      	bne.n	8005fac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa4:	0cdb      	lsrs	r3, r3, #19
 8005fa6:	04db      	lsls	r3, r3, #19
 8005fa8:	6113      	str	r3, [r2, #16]
 8005faa:	e04e      	b.n	800604a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc6:	0cdb      	lsrs	r3, r3, #19
 8005fc8:	04db      	lsls	r3, r3, #19
 8005fca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d903      	bls.n	8006004 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006022:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006030:	691a      	ldr	r2, [r3, #16]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800603a:	6939      	ldr	r1, [r7, #16]
 800603c:	0148      	lsls	r0, r1, #5
 800603e:	6979      	ldr	r1, [r7, #20]
 8006040:	4401      	add	r1, r0
 8006042:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006046:	4313      	orrs	r3, r2
 8006048:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d11e      	bne.n	800608e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d009      	beq.n	800606c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	461a      	mov	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006086:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	e097      	b.n	80061be <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 8083 	beq.w	80061be <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	2101      	movs	r1, #1
 80060ca:	fa01 f303 	lsl.w	r3, r1, r3
 80060ce:	6979      	ldr	r1, [r7, #20]
 80060d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060d4:	4313      	orrs	r3, r2
 80060d6:	634b      	str	r3, [r1, #52]	; 0x34
 80060d8:	e071      	b.n	80061be <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f4:	0cdb      	lsrs	r3, r3, #19
 80060f6:	04db      	lsls	r3, r3, #19
 80060f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	0151      	lsls	r1, r2, #5
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	440a      	add	r2, r1
 8006110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006114:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006118:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800611c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	440a      	add	r2, r1
 800614c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006150:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006154:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800616c:	6939      	ldr	r1, [r7, #16]
 800616e:	0148      	lsls	r0, r1, #5
 8006170:	6979      	ldr	r1, [r7, #20]
 8006172:	4401      	add	r1, r0
 8006174:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006178:	4313      	orrs	r3, r2
 800617a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d10d      	bne.n	800619e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6919      	ldr	r1, [r3, #16]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619a:	460a      	mov	r2, r1
 800619c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d14a      	bne.n	8006280 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006202:	f040 8086 	bne.w	8006312 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	7812      	ldrb	r2, [r2, #0]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006224:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006228:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	7812      	ldrb	r2, [r2, #0]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	440a      	add	r2, r1
 8006244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800624c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f242 7210 	movw	r2, #10000	; 0x2710
 800625a:	4293      	cmp	r3, r2
 800625c:	d902      	bls.n	8006264 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	75fb      	strb	r3, [r7, #23]
          break;
 8006262:	e056      	b.n	8006312 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800627c:	d0e7      	beq.n	800624e <USB_EPStopXfer+0x82>
 800627e:	e048      	b.n	8006312 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006298:	d13b      	bne.n	8006312 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	7812      	ldrb	r2, [r2, #0]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	7812      	ldrb	r2, [r2, #0]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3301      	adds	r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d902      	bls.n	80062f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	75fb      	strb	r3, [r7, #23]
          break;
 80062f6:	e00c      	b.n	8006312 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800630c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006310:	d0e7      	beq.n	80062e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
}
 8006314:	4618      	mov	r0, r3
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006320:	b480      	push	{r7}
 8006322:	b089      	sub	sp, #36	; 0x24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	4611      	mov	r1, r2
 800632c:	461a      	mov	r2, r3
 800632e:	460b      	mov	r3, r1
 8006330:	71fb      	strb	r3, [r7, #7]
 8006332:	4613      	mov	r3, r2
 8006334:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800633e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006342:	2b00      	cmp	r3, #0
 8006344:	d123      	bne.n	800638e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006346:	88bb      	ldrh	r3, [r7, #4]
 8006348:	3303      	adds	r3, #3
 800634a:	089b      	lsrs	r3, r3, #2
 800634c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800634e:	2300      	movs	r3, #0
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	e018      	b.n	8006386 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	031a      	lsls	r2, r3, #12
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	4413      	add	r3, r2
 800635c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006360:	461a      	mov	r2, r3
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	3301      	adds	r3, #1
 800636c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	3301      	adds	r3, #1
 8006372:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	3301      	adds	r3, #1
 8006378:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	3301      	adds	r3, #1
 800637e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	3301      	adds	r3, #1
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	429a      	cmp	r2, r3
 800638c:	d3e2      	bcc.n	8006354 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3724      	adds	r7, #36	; 0x24
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800639c:	b480      	push	{r7}
 800639e:	b08b      	sub	sp, #44	; 0x2c
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	089b      	lsrs	r3, r3, #2
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063c2:	2300      	movs	r3, #0
 80063c4:	623b      	str	r3, [r7, #32]
 80063c6:	e014      	b.n	80063f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	3301      	adds	r3, #1
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	3301      	adds	r3, #1
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	3301      	adds	r3, #1
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	3301      	adds	r3, #1
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	3301      	adds	r3, #1
 80063f0:	623b      	str	r3, [r7, #32]
 80063f2:	6a3a      	ldr	r2, [r7, #32]
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d3e6      	bcc.n	80063c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063fa:	8bfb      	ldrh	r3, [r7, #30]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01e      	beq.n	800643e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800640a:	461a      	mov	r2, r3
 800640c:	f107 0310 	add.w	r3, r7, #16
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	fa22 f303 	lsr.w	r3, r2, r3
 8006420:	b2da      	uxtb	r2, r3
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	701a      	strb	r2, [r3, #0]
      i++;
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	3301      	adds	r3, #1
 800642a:	623b      	str	r3, [r7, #32]
      pDest++;
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	3301      	adds	r3, #1
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006432:	8bfb      	ldrh	r3, [r7, #30]
 8006434:	3b01      	subs	r3, #1
 8006436:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006438:	8bfb      	ldrh	r3, [r7, #30]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1ea      	bne.n	8006414 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006440:	4618      	mov	r0, r3
 8006442:	372c      	adds	r7, #44	; 0x2c
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d12c      	bne.n	80064c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	db12      	blt.n	80064a0 <USB_EPSetStall+0x54>
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00f      	beq.n	80064a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	440a      	add	r2, r1
 8006496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800649a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800649e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	e02b      	b.n	800651a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	db12      	blt.n	80064fa <USB_EPSetStall+0xae>
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00f      	beq.n	80064fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	440a      	add	r2, r1
 8006510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006518:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d128      	bne.n	8006596 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	440a      	add	r2, r1
 800655a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006562:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	791b      	ldrb	r3, [r3, #4]
 8006568:	2b03      	cmp	r3, #3
 800656a:	d003      	beq.n	8006574 <USB_EPClearStall+0x4c>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	791b      	ldrb	r3, [r3, #4]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d138      	bne.n	80065e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	e027      	b.n	80065e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	0151      	lsls	r1, r2, #5
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	440a      	add	r2, r1
 80065ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	791b      	ldrb	r3, [r3, #4]
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d003      	beq.n	80065c6 <USB_EPClearStall+0x9e>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	791b      	ldrb	r3, [r3, #4]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d10f      	bne.n	80065e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006612:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006616:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006628:	68f9      	ldr	r1, [r7, #12]
 800662a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800662e:	4313      	orrs	r3, r2
 8006630:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800665a:	f023 0303 	bic.w	r3, r3, #3
 800665e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800666e:	f023 0302 	bic.w	r3, r3, #2
 8006672:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800669c:	f023 0303 	bic.w	r3, r3, #3
 80066a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066b0:	f043 0302 	orr.w	r3, r3, #2
 80066b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4013      	ands	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066dc:	68fb      	ldr	r3, [r7, #12]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	4013      	ands	r3, r2
 800670c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	0c1b      	lsrs	r3, r3, #16
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	4013      	ands	r3, r2
 8006740:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	b29b      	uxth	r3, r3
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	460b      	mov	r3, r1
 800675c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	4013      	ands	r3, r2
 800677e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006780:	68bb      	ldr	r3, [r7, #8]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800678e:	b480      	push	{r7}
 8006790:	b087      	sub	sp, #28
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	460b      	mov	r3, r1
 8006798:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067b2:	78fb      	ldrb	r3, [r7, #3]
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	fa22 f303 	lsr.w	r3, r2, r3
 80067be:	01db      	lsls	r3, r3, #7
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4013      	ands	r3, r2
 80067da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067dc:	68bb      	ldr	r3, [r7, #8]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	f003 0301 	and.w	r3, r3, #1
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006820:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006824:	f023 0307 	bic.w	r3, r3, #7
 8006828:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	460b      	mov	r3, r1
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	333c      	adds	r3, #60	; 0x3c
 8006862:	3304      	adds	r3, #4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	4a26      	ldr	r2, [pc, #152]	; (8006904 <USB_EP0_OutStart+0xb8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d90a      	bls.n	8006886 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800687c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006880:	d101      	bne.n	8006886 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	e037      	b.n	80068f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	461a      	mov	r2, r3
 800688e:	2300      	movs	r3, #0
 8006890:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b4:	f043 0318 	orr.w	r3, r3, #24
 80068b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068ce:	7afb      	ldrb	r3, [r7, #11]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d10f      	bne.n	80068f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068da:	461a      	mov	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	4f54300a 	.word	0x4f54300a

08006908 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3301      	adds	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a13      	ldr	r2, [pc, #76]	; (800696c <USB_CoreReset+0x64>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d901      	bls.n	8006926 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e01b      	b.n	800695e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	daf2      	bge.n	8006914 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f043 0201 	orr.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3301      	adds	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4a09      	ldr	r2, [pc, #36]	; (800696c <USB_CoreReset+0x64>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d901      	bls.n	8006950 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e006      	b.n	800695e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b01      	cmp	r3, #1
 800695a:	d0f0      	beq.n	800693e <USB_CoreReset+0x36>

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	00030d40 	.word	0x00030d40

08006970 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800697c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006980:	f002 fc1e 	bl	80091c0 <USBD_static_malloc>
 8006984:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	32b0      	adds	r2, #176	; 0xb0
 8006996:	2100      	movs	r1, #0
 8006998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800699c:	2302      	movs	r3, #2
 800699e:	e0d4      	b.n	8006b4a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80069a0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80069a4:	2100      	movs	r1, #0
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f002 fc4e 	bl	8009248 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	32b0      	adds	r2, #176	; 0xb0
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	32b0      	adds	r2, #176	; 0xb0
 80069c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	7c1b      	ldrb	r3, [r3, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d138      	bne.n	8006a4a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069d8:	4b5e      	ldr	r3, [pc, #376]	; (8006b54 <USBD_CDC_Init+0x1e4>)
 80069da:	7819      	ldrb	r1, [r3, #0]
 80069dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069e0:	2202      	movs	r2, #2
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f002 fac9 	bl	8008f7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80069e8:	4b5a      	ldr	r3, [pc, #360]	; (8006b54 <USBD_CDC_Init+0x1e4>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	f003 020f 	and.w	r2, r3, #15
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	440b      	add	r3, r1
 80069fc:	3324      	adds	r3, #36	; 0x24
 80069fe:	2201      	movs	r2, #1
 8006a00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a02:	4b55      	ldr	r3, [pc, #340]	; (8006b58 <USBD_CDC_Init+0x1e8>)
 8006a04:	7819      	ldrb	r1, [r3, #0]
 8006a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f002 fab4 	bl	8008f7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a12:	4b51      	ldr	r3, [pc, #324]	; (8006b58 <USBD_CDC_Init+0x1e8>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	f003 020f 	and.w	r2, r3, #15
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	440b      	add	r3, r1
 8006a26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a2e:	4b4b      	ldr	r3, [pc, #300]	; (8006b5c <USBD_CDC_Init+0x1ec>)
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	f003 020f 	and.w	r2, r3, #15
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	440b      	add	r3, r1
 8006a42:	3326      	adds	r3, #38	; 0x26
 8006a44:	2210      	movs	r2, #16
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	e035      	b.n	8006ab6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a4a:	4b42      	ldr	r3, [pc, #264]	; (8006b54 <USBD_CDC_Init+0x1e4>)
 8006a4c:	7819      	ldrb	r1, [r3, #0]
 8006a4e:	2340      	movs	r3, #64	; 0x40
 8006a50:	2202      	movs	r2, #2
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f002 fa91 	bl	8008f7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a58:	4b3e      	ldr	r3, [pc, #248]	; (8006b54 <USBD_CDC_Init+0x1e4>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	f003 020f 	and.w	r2, r3, #15
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	440b      	add	r3, r1
 8006a6c:	3324      	adds	r3, #36	; 0x24
 8006a6e:	2201      	movs	r2, #1
 8006a70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a72:	4b39      	ldr	r3, [pc, #228]	; (8006b58 <USBD_CDC_Init+0x1e8>)
 8006a74:	7819      	ldrb	r1, [r3, #0]
 8006a76:	2340      	movs	r3, #64	; 0x40
 8006a78:	2202      	movs	r2, #2
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f002 fa7d 	bl	8008f7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a80:	4b35      	ldr	r3, [pc, #212]	; (8006b58 <USBD_CDC_Init+0x1e8>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f003 020f 	and.w	r2, r3, #15
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a98:	2201      	movs	r2, #1
 8006a9a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a9c:	4b2f      	ldr	r3, [pc, #188]	; (8006b5c <USBD_CDC_Init+0x1ec>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	f003 020f 	and.w	r2, r3, #15
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	3326      	adds	r3, #38	; 0x26
 8006ab2:	2210      	movs	r2, #16
 8006ab4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ab6:	4b29      	ldr	r3, [pc, #164]	; (8006b5c <USBD_CDC_Init+0x1ec>)
 8006ab8:	7819      	ldrb	r1, [r3, #0]
 8006aba:	2308      	movs	r3, #8
 8006abc:	2203      	movs	r2, #3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f002 fa5b 	bl	8008f7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ac4:	4b25      	ldr	r3, [pc, #148]	; (8006b5c <USBD_CDC_Init+0x1ec>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	f003 020f 	and.w	r2, r3, #15
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	3324      	adds	r3, #36	; 0x24
 8006ada:	2201      	movs	r2, #1
 8006adc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	33b0      	adds	r3, #176	; 0xb0
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006b14:	2302      	movs	r3, #2
 8006b16:	e018      	b.n	8006b4a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	7c1b      	ldrb	r3, [r3, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b20:	4b0d      	ldr	r3, [pc, #52]	; (8006b58 <USBD_CDC_Init+0x1e8>)
 8006b22:	7819      	ldrb	r1, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f002 fb12 	bl	8009158 <USBD_LL_PrepareReceive>
 8006b34:	e008      	b.n	8006b48 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b36:	4b08      	ldr	r3, [pc, #32]	; (8006b58 <USBD_CDC_Init+0x1e8>)
 8006b38:	7819      	ldrb	r1, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b40:	2340      	movs	r3, #64	; 0x40
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f002 fb08 	bl	8009158 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20000093 	.word	0x20000093
 8006b58:	20000094 	.word	0x20000094
 8006b5c:	20000095 	.word	0x20000095

08006b60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b6c:	4b3a      	ldr	r3, [pc, #232]	; (8006c58 <USBD_CDC_DeInit+0xf8>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f002 fa27 	bl	8008fc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b78:	4b37      	ldr	r3, [pc, #220]	; (8006c58 <USBD_CDC_DeInit+0xf8>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	f003 020f 	and.w	r2, r3, #15
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	440b      	add	r3, r1
 8006b8c:	3324      	adds	r3, #36	; 0x24
 8006b8e:	2200      	movs	r2, #0
 8006b90:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b92:	4b32      	ldr	r3, [pc, #200]	; (8006c5c <USBD_CDC_DeInit+0xfc>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f002 fa14 	bl	8008fc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b9e:	4b2f      	ldr	r3, [pc, #188]	; (8006c5c <USBD_CDC_DeInit+0xfc>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	f003 020f 	and.w	r2, r3, #15
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	440b      	add	r3, r1
 8006bb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006bba:	4b29      	ldr	r3, [pc, #164]	; (8006c60 <USBD_CDC_DeInit+0x100>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f002 fa00 	bl	8008fc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006bc6:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <USBD_CDC_DeInit+0x100>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f003 020f 	and.w	r2, r3, #15
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	3324      	adds	r3, #36	; 0x24
 8006bdc:	2200      	movs	r2, #0
 8006bde:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006be0:	4b1f      	ldr	r3, [pc, #124]	; (8006c60 <USBD_CDC_DeInit+0x100>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	f003 020f 	and.w	r2, r3, #15
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	3326      	adds	r3, #38	; 0x26
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	32b0      	adds	r2, #176	; 0xb0
 8006c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01f      	beq.n	8006c4c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	33b0      	adds	r3, #176	; 0xb0
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	32b0      	adds	r2, #176	; 0xb0
 8006c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f002 fad4 	bl	80091dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	32b0      	adds	r2, #176	; 0xb0
 8006c3e:	2100      	movs	r1, #0
 8006c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000093 	.word	0x20000093
 8006c5c:	20000094 	.word	0x20000094
 8006c60:	20000095 	.word	0x20000095

08006c64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	32b0      	adds	r2, #176	; 0xb0
 8006c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c7c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e0bf      	b.n	8006e14 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d050      	beq.n	8006d42 <USBD_CDC_Setup+0xde>
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	f040 80af 	bne.w	8006e04 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	88db      	ldrh	r3, [r3, #6]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d03a      	beq.n	8006d24 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	b25b      	sxtb	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	da1b      	bge.n	8006cf0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	33b0      	adds	r3, #176	; 0xb0
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006cce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	88d2      	ldrh	r2, [r2, #6]
 8006cd4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	88db      	ldrh	r3, [r3, #6]
 8006cda:	2b07      	cmp	r3, #7
 8006cdc:	bf28      	it	cs
 8006cde:	2307      	movcs	r3, #7
 8006ce0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	89fa      	ldrh	r2, [r7, #14]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 fd43 	bl	8008774 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006cee:	e090      	b.n	8006e12 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	785a      	ldrb	r2, [r3, #1]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	88db      	ldrh	r3, [r3, #6]
 8006cfe:	2b3f      	cmp	r3, #63	; 0x3f
 8006d00:	d803      	bhi.n	8006d0a <USBD_CDC_Setup+0xa6>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	88db      	ldrh	r3, [r3, #6]
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	e000      	b.n	8006d0c <USBD_CDC_Setup+0xa8>
 8006d0a:	2240      	movs	r2, #64	; 0x40
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006d12:	6939      	ldr	r1, [r7, #16]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 fd55 	bl	80087cc <USBD_CtlPrepareRx>
      break;
 8006d22:	e076      	b.n	8006e12 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	33b0      	adds	r3, #176	; 0xb0
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	7850      	ldrb	r0, [r2, #1]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	4798      	blx	r3
      break;
 8006d40:	e067      	b.n	8006e12 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	2b0b      	cmp	r3, #11
 8006d48:	d851      	bhi.n	8006dee <USBD_CDC_Setup+0x18a>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <USBD_CDC_Setup+0xec>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006d81 	.word	0x08006d81
 8006d54:	08006dfd 	.word	0x08006dfd
 8006d58:	08006def 	.word	0x08006def
 8006d5c:	08006def 	.word	0x08006def
 8006d60:	08006def 	.word	0x08006def
 8006d64:	08006def 	.word	0x08006def
 8006d68:	08006def 	.word	0x08006def
 8006d6c:	08006def 	.word	0x08006def
 8006d70:	08006def 	.word	0x08006def
 8006d74:	08006def 	.word	0x08006def
 8006d78:	08006dab 	.word	0x08006dab
 8006d7c:	08006dd5 	.word	0x08006dd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d107      	bne.n	8006d9c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d8c:	f107 030a 	add.w	r3, r7, #10
 8006d90:	2202      	movs	r2, #2
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 fced 	bl	8008774 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d9a:	e032      	b.n	8006e02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fc77 	bl	8008692 <USBD_CtlError>
            ret = USBD_FAIL;
 8006da4:	2303      	movs	r3, #3
 8006da6:	75fb      	strb	r3, [r7, #23]
          break;
 8006da8:	e02b      	b.n	8006e02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d107      	bne.n	8006dc6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006db6:	f107 030d 	add.w	r3, r7, #13
 8006dba:	2201      	movs	r2, #1
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fcd8 	bl	8008774 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dc4:	e01d      	b.n	8006e02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 fc62 	bl	8008692 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	75fb      	strb	r3, [r7, #23]
          break;
 8006dd2:	e016      	b.n	8006e02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d00f      	beq.n	8006e00 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 fc55 	bl	8008692 <USBD_CtlError>
            ret = USBD_FAIL;
 8006de8:	2303      	movs	r3, #3
 8006dea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006dec:	e008      	b.n	8006e00 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 fc4e 	bl	8008692 <USBD_CtlError>
          ret = USBD_FAIL;
 8006df6:	2303      	movs	r3, #3
 8006df8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dfa:	e002      	b.n	8006e02 <USBD_CDC_Setup+0x19e>
          break;
 8006dfc:	bf00      	nop
 8006dfe:	e008      	b.n	8006e12 <USBD_CDC_Setup+0x1ae>
          break;
 8006e00:	bf00      	nop
      }
      break;
 8006e02:	e006      	b.n	8006e12 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 fc43 	bl	8008692 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e10:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	32b0      	adds	r2, #176	; 0xb0
 8006e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e065      	b.n	8006f12 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	32b0      	adds	r2, #176	; 0xb0
 8006e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	f003 020f 	and.w	r2, r3, #15
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	3318      	adds	r3, #24
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d02f      	beq.n	8006ed0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	f003 020f 	and.w	r2, r3, #15
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	3318      	adds	r3, #24
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	78fb      	ldrb	r3, [r7, #3]
 8006e88:	f003 010f 	and.w	r1, r3, #15
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	00db      	lsls	r3, r3, #3
 8006e92:	440b      	add	r3, r1
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4403      	add	r3, r0
 8006e98:	3348      	adds	r3, #72	; 0x48
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ea0:	fb01 f303 	mul.w	r3, r1, r3
 8006ea4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d112      	bne.n	8006ed0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006eaa:	78fb      	ldrb	r3, [r7, #3]
 8006eac:	f003 020f 	and.w	r2, r3, #15
 8006eb0:	6879      	ldr	r1, [r7, #4]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	440b      	add	r3, r1
 8006ebc:	3318      	adds	r3, #24
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ec2:	78f9      	ldrb	r1, [r7, #3]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f002 f924 	bl	8009116 <USBD_LL_Transmit>
 8006ece:	e01f      	b.n	8006f10 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	33b0      	adds	r3, #176	; 0xb0
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d010      	beq.n	8006f10 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	33b0      	adds	r3, #176	; 0xb0
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f0c:	78fa      	ldrb	r2, [r7, #3]
 8006f0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	460b      	mov	r3, r1
 8006f24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	32b0      	adds	r2, #176	; 0xb0
 8006f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f34:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	32b0      	adds	r2, #176	; 0xb0
 8006f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e01a      	b.n	8006f82 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f4c:	78fb      	ldrb	r3, [r7, #3]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f002 f922 	bl	800919a <USBD_LL_GetRxDataSize>
 8006f56:	4602      	mov	r2, r0
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	33b0      	adds	r3, #176	; 0xb0
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	32b0      	adds	r2, #176	; 0xb0
 8006f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e025      	b.n	8006ff8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	33b0      	adds	r3, #176	; 0xb0
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01a      	beq.n	8006ff6 <USBD_CDC_EP0_RxReady+0x6c>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fc6:	2bff      	cmp	r3, #255	; 0xff
 8006fc8:	d015      	beq.n	8006ff6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	33b0      	adds	r3, #176	; 0xb0
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006fe2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fea:	b292      	uxth	r2, r2
 8006fec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	22ff      	movs	r2, #255	; 0xff
 8006ff2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007008:	2182      	movs	r1, #130	; 0x82
 800700a:	4818      	ldr	r0, [pc, #96]	; (800706c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800700c:	f000 fd09 	bl	8007a22 <USBD_GetEpDesc>
 8007010:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007012:	2101      	movs	r1, #1
 8007014:	4815      	ldr	r0, [pc, #84]	; (800706c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007016:	f000 fd04 	bl	8007a22 <USBD_GetEpDesc>
 800701a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800701c:	2181      	movs	r1, #129	; 0x81
 800701e:	4813      	ldr	r0, [pc, #76]	; (800706c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007020:	f000 fcff 	bl	8007a22 <USBD_GetEpDesc>
 8007024:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2210      	movs	r2, #16
 8007030:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d006      	beq.n	8007046 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2200      	movs	r2, #0
 800703c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007040:	711a      	strb	r2, [r3, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007054:	711a      	strb	r2, [r3, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2243      	movs	r2, #67	; 0x43
 800705e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007060:	4b02      	ldr	r3, [pc, #8]	; (800706c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000050 	.word	0x20000050

08007070 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007078:	2182      	movs	r1, #130	; 0x82
 800707a:	4818      	ldr	r0, [pc, #96]	; (80070dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800707c:	f000 fcd1 	bl	8007a22 <USBD_GetEpDesc>
 8007080:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007082:	2101      	movs	r1, #1
 8007084:	4815      	ldr	r0, [pc, #84]	; (80070dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007086:	f000 fccc 	bl	8007a22 <USBD_GetEpDesc>
 800708a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800708c:	2181      	movs	r1, #129	; 0x81
 800708e:	4813      	ldr	r0, [pc, #76]	; (80070dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007090:	f000 fcc7 	bl	8007a22 <USBD_GetEpDesc>
 8007094:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2210      	movs	r2, #16
 80070a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d006      	beq.n	80070b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2200      	movs	r2, #0
 80070ac:	711a      	strb	r2, [r3, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f042 0202 	orr.w	r2, r2, #2
 80070b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d006      	beq.n	80070ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	711a      	strb	r2, [r3, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f042 0202 	orr.w	r2, r2, #2
 80070c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2243      	movs	r2, #67	; 0x43
 80070ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070d0:	4b02      	ldr	r3, [pc, #8]	; (80070dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000050 	.word	0x20000050

080070e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070e8:	2182      	movs	r1, #130	; 0x82
 80070ea:	4818      	ldr	r0, [pc, #96]	; (800714c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070ec:	f000 fc99 	bl	8007a22 <USBD_GetEpDesc>
 80070f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070f2:	2101      	movs	r1, #1
 80070f4:	4815      	ldr	r0, [pc, #84]	; (800714c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070f6:	f000 fc94 	bl	8007a22 <USBD_GetEpDesc>
 80070fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070fc:	2181      	movs	r1, #129	; 0x81
 80070fe:	4813      	ldr	r0, [pc, #76]	; (800714c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007100:	f000 fc8f 	bl	8007a22 <USBD_GetEpDesc>
 8007104:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2210      	movs	r2, #16
 8007110:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d006      	beq.n	8007126 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	2200      	movs	r2, #0
 800711c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007120:	711a      	strb	r2, [r3, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d006      	beq.n	800713a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007134:	711a      	strb	r2, [r3, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2243      	movs	r2, #67	; 0x43
 800713e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007140:	4b02      	ldr	r3, [pc, #8]	; (800714c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000050 	.word	0x20000050

08007150 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	220a      	movs	r2, #10
 800715c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800715e:	4b03      	ldr	r3, [pc, #12]	; (800716c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	2000000c 	.word	0x2000000c

08007170 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007180:	2303      	movs	r3, #3
 8007182:	e009      	b.n	8007198 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	33b0      	adds	r3, #176	; 0xb0
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	32b0      	adds	r2, #176	; 0xb0
 80071ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071be:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e008      	b.n	80071dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	32b0      	adds	r2, #176	; 0xb0
 80071fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007200:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007208:	2303      	movs	r3, #3
 800720a:	e004      	b.n	8007216 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
	...

08007224 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	32b0      	adds	r2, #176	; 0xb0
 8007236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32b0      	adds	r2, #176	; 0xb0
 8007246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800724e:	2303      	movs	r3, #3
 8007250:	e018      	b.n	8007284 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	7c1b      	ldrb	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10a      	bne.n	8007270 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800725a:	4b0c      	ldr	r3, [pc, #48]	; (800728c <USBD_CDC_ReceivePacket+0x68>)
 800725c:	7819      	ldrb	r1, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 ff75 	bl	8009158 <USBD_LL_PrepareReceive>
 800726e:	e008      	b.n	8007282 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007270:	4b06      	ldr	r3, [pc, #24]	; (800728c <USBD_CDC_ReceivePacket+0x68>)
 8007272:	7819      	ldrb	r1, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800727a:	2340      	movs	r3, #64	; 0x40
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 ff6b 	bl	8009158 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20000094 	.word	0x20000094

08007290 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e01f      	b.n	80072e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	79fa      	ldrb	r2, [r7, #7]
 80072da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f001 fde5 	bl	8008eac <USBD_LL_Init>
 80072e2:	4603      	mov	r3, r0
 80072e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007304:	2303      	movs	r3, #3
 8007306:	e025      	b.n	8007354 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	32ae      	adds	r2, #174	; 0xae
 800731a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00f      	beq.n	8007344 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	32ae      	adds	r2, #174	; 0xae
 800732e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	f107 020e 	add.w	r2, r7, #14
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
 800733c:	4602      	mov	r2, r0
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 fded 	bl	8008f44 <USBD_LL_Start>
 800736a:	4603      	mov	r3, r0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800737c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800737e:	4618      	mov	r0, r3
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	78fa      	ldrb	r2, [r7, #3]
 80073ae:	4611      	mov	r1, r2
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	4798      	blx	r3
 80073b4:	4603      	mov	r3, r0
 80073b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	460b      	mov	r3, r1
 80073cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	78fa      	ldrb	r2, [r7, #3]
 80073dc:	4611      	mov	r1, r2
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80073e8:	2303      	movs	r3, #3
 80073ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	4618      	mov	r0, r3
 800740a:	f001 f908 	bl	800861e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800741c:	461a      	mov	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800742a:	f003 031f 	and.w	r3, r3, #31
 800742e:	2b02      	cmp	r3, #2
 8007430:	d01a      	beq.n	8007468 <USBD_LL_SetupStage+0x72>
 8007432:	2b02      	cmp	r3, #2
 8007434:	d822      	bhi.n	800747c <USBD_LL_SetupStage+0x86>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <USBD_LL_SetupStage+0x4a>
 800743a:	2b01      	cmp	r3, #1
 800743c:	d00a      	beq.n	8007454 <USBD_LL_SetupStage+0x5e>
 800743e:	e01d      	b.n	800747c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fb5f 	bl	8007b0c <USBD_StdDevReq>
 800744e:	4603      	mov	r3, r0
 8007450:	73fb      	strb	r3, [r7, #15]
      break;
 8007452:	e020      	b.n	8007496 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fbc7 	bl	8007bf0 <USBD_StdItfReq>
 8007462:	4603      	mov	r3, r0
 8007464:	73fb      	strb	r3, [r7, #15]
      break;
 8007466:	e016      	b.n	8007496 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fc29 	bl	8007cc8 <USBD_StdEPReq>
 8007476:	4603      	mov	r3, r0
 8007478:	73fb      	strb	r3, [r7, #15]
      break;
 800747a:	e00c      	b.n	8007496 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007482:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007486:	b2db      	uxtb	r3, r3
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 fdba 	bl	8009004 <USBD_LL_StallEP>
 8007490:	4603      	mov	r3, r0
 8007492:	73fb      	strb	r3, [r7, #15]
      break;
 8007494:	bf00      	nop
  }

  return ret;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	460b      	mov	r3, r1
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80074b2:	7afb      	ldrb	r3, [r7, #11]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d16e      	bne.n	8007596 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80074be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	f040 8098 	bne.w	80075fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d913      	bls.n	8007500 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	1ad2      	subs	r2, r2, r3
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	4293      	cmp	r3, r2
 80074f0:	bf28      	it	cs
 80074f2:	4613      	movcs	r3, r2
 80074f4:	461a      	mov	r2, r3
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f001 f984 	bl	8008806 <USBD_CtlContinueRx>
 80074fe:	e07d      	b.n	80075fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007506:	f003 031f 	and.w	r3, r3, #31
 800750a:	2b02      	cmp	r3, #2
 800750c:	d014      	beq.n	8007538 <USBD_LL_DataOutStage+0x98>
 800750e:	2b02      	cmp	r3, #2
 8007510:	d81d      	bhi.n	800754e <USBD_LL_DataOutStage+0xae>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <USBD_LL_DataOutStage+0x7c>
 8007516:	2b01      	cmp	r3, #1
 8007518:	d003      	beq.n	8007522 <USBD_LL_DataOutStage+0x82>
 800751a:	e018      	b.n	800754e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	75bb      	strb	r3, [r7, #22]
            break;
 8007520:	e018      	b.n	8007554 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007528:	b2db      	uxtb	r3, r3
 800752a:	4619      	mov	r1, r3
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 fa5e 	bl	80079ee <USBD_CoreFindIF>
 8007532:	4603      	mov	r3, r0
 8007534:	75bb      	strb	r3, [r7, #22]
            break;
 8007536:	e00d      	b.n	8007554 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800753e:	b2db      	uxtb	r3, r3
 8007540:	4619      	mov	r1, r3
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 fa60 	bl	8007a08 <USBD_CoreFindEP>
 8007548:	4603      	mov	r3, r0
 800754a:	75bb      	strb	r3, [r7, #22]
            break;
 800754c:	e002      	b.n	8007554 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	75bb      	strb	r3, [r7, #22]
            break;
 8007552:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007554:	7dbb      	ldrb	r3, [r7, #22]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d119      	bne.n	800758e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b03      	cmp	r3, #3
 8007564:	d113      	bne.n	800758e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007566:	7dba      	ldrb	r2, [r7, #22]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	32ae      	adds	r2, #174	; 0xae
 800756c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00b      	beq.n	800758e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007576:	7dba      	ldrb	r2, [r7, #22]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800757e:	7dba      	ldrb	r2, [r7, #22]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	32ae      	adds	r2, #174	; 0xae
 8007584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f001 f94a 	bl	8008828 <USBD_CtlSendStatus>
 8007594:	e032      	b.n	80075fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007596:	7afb      	ldrb	r3, [r7, #11]
 8007598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759c:	b2db      	uxtb	r3, r3
 800759e:	4619      	mov	r1, r3
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 fa31 	bl	8007a08 <USBD_CoreFindEP>
 80075a6:	4603      	mov	r3, r0
 80075a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075aa:	7dbb      	ldrb	r3, [r7, #22]
 80075ac:	2bff      	cmp	r3, #255	; 0xff
 80075ae:	d025      	beq.n	80075fc <USBD_LL_DataOutStage+0x15c>
 80075b0:	7dbb      	ldrb	r3, [r7, #22]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d122      	bne.n	80075fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d117      	bne.n	80075f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075c2:	7dba      	ldrb	r2, [r7, #22]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	32ae      	adds	r2, #174	; 0xae
 80075c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00f      	beq.n	80075f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80075d2:	7dba      	ldrb	r2, [r7, #22]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80075da:	7dba      	ldrb	r2, [r7, #22]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	32ae      	adds	r2, #174	; 0xae
 80075e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	7afa      	ldrb	r2, [r7, #11]
 80075e8:	4611      	mov	r1, r2
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	4798      	blx	r3
 80075ee:	4603      	mov	r3, r0
 80075f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
 80075fa:	e000      	b.n	80075fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b086      	sub	sp, #24
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	460b      	mov	r3, r1
 8007610:	607a      	str	r2, [r7, #4]
 8007612:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d16f      	bne.n	80076fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3314      	adds	r3, #20
 800761e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007626:	2b02      	cmp	r3, #2
 8007628:	d15a      	bne.n	80076e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	429a      	cmp	r2, r3
 8007634:	d914      	bls.n	8007660 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	461a      	mov	r2, r3
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f001 f8ac 	bl	80087aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007652:	2300      	movs	r3, #0
 8007654:	2200      	movs	r2, #0
 8007656:	2100      	movs	r1, #0
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f001 fd7d 	bl	8009158 <USBD_LL_PrepareReceive>
 800765e:	e03f      	b.n	80076e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	429a      	cmp	r2, r3
 800766a:	d11c      	bne.n	80076a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007674:	429a      	cmp	r2, r3
 8007676:	d316      	bcc.n	80076a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007682:	429a      	cmp	r2, r3
 8007684:	d20f      	bcs.n	80076a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007686:	2200      	movs	r2, #0
 8007688:	2100      	movs	r1, #0
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f001 f88d 	bl	80087aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007698:	2300      	movs	r3, #0
 800769a:	2200      	movs	r2, #0
 800769c:	2100      	movs	r1, #0
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f001 fd5a 	bl	8009158 <USBD_LL_PrepareReceive>
 80076a4:	e01c      	b.n	80076e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d10f      	bne.n	80076d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d009      	beq.n	80076d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076d2:	2180      	movs	r1, #128	; 0x80
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f001 fc95 	bl	8009004 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f001 f8b7 	bl	800884e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d03a      	beq.n	8007760 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7ff fe42 	bl	8007374 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80076f8:	e032      	b.n	8007760 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80076fa:	7afb      	ldrb	r3, [r7, #11]
 80076fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007700:	b2db      	uxtb	r3, r3
 8007702:	4619      	mov	r1, r3
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 f97f 	bl	8007a08 <USBD_CoreFindEP>
 800770a:	4603      	mov	r3, r0
 800770c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	2bff      	cmp	r3, #255	; 0xff
 8007712:	d025      	beq.n	8007760 <USBD_LL_DataInStage+0x15a>
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d122      	bne.n	8007760 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b03      	cmp	r3, #3
 8007724:	d11c      	bne.n	8007760 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007726:	7dfa      	ldrb	r2, [r7, #23]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	32ae      	adds	r2, #174	; 0xae
 800772c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d014      	beq.n	8007760 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007736:	7dfa      	ldrb	r2, [r7, #23]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800773e:	7dfa      	ldrb	r2, [r7, #23]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	32ae      	adds	r2, #174	; 0xae
 8007744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	7afa      	ldrb	r2, [r7, #11]
 800774c:	4611      	mov	r1, r2
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	4798      	blx	r3
 8007752:	4603      	mov	r3, r0
 8007754:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007756:	7dbb      	ldrb	r3, [r7, #22]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800775c:	7dbb      	ldrb	r3, [r7, #22]
 800775e:	e000      	b.n	8007762 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d014      	beq.n	80077d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00e      	beq.n	80077d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	6852      	ldr	r2, [r2, #4]
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	4611      	mov	r1, r2
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80077cc:	2303      	movs	r3, #3
 80077ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077d0:	2340      	movs	r3, #64	; 0x40
 80077d2:	2200      	movs	r2, #0
 80077d4:	2100      	movs	r1, #0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 fbcf 	bl	8008f7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2240      	movs	r2, #64	; 0x40
 80077e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	2200      	movs	r2, #0
 80077f0:	2180      	movs	r1, #128	; 0x80
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 fbc1 	bl	8008f7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2240      	movs	r2, #64	; 0x40
 8007802:	621a      	str	r2, [r3, #32]

  return ret;
 8007804:	7bfb      	ldrb	r3, [r7, #15]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	78fa      	ldrb	r2, [r7, #3]
 800781e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800783c:	b2da      	uxtb	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2204      	movs	r2, #4
 8007848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b04      	cmp	r3, #4
 800786c:	d106      	bne.n	800787c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007874:	b2da      	uxtb	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b03      	cmp	r3, #3
 800789c:	d110      	bne.n	80078c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ae:	69db      	ldr	r3, [r3, #28]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	460b      	mov	r3, r1
 80078d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	32ae      	adds	r2, #174	; 0xae
 80078e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e01c      	b.n	8007926 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d115      	bne.n	8007924 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	32ae      	adds	r2, #174	; 0xae
 8007902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00b      	beq.n	8007924 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	32ae      	adds	r2, #174	; 0xae
 8007916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	78fa      	ldrb	r2, [r7, #3]
 800791e:	4611      	mov	r1, r2
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	460b      	mov	r3, r1
 8007938:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	32ae      	adds	r2, #174	; 0xae
 8007944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800794c:	2303      	movs	r3, #3
 800794e:	e01c      	b.n	800798a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b03      	cmp	r3, #3
 800795a:	d115      	bne.n	8007988 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	32ae      	adds	r2, #174	; 0xae
 8007966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00b      	beq.n	8007988 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	32ae      	adds	r2, #174	; 0xae
 800797a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	78fa      	ldrb	r2, [r7, #3]
 8007982:	4611      	mov	r1, r2
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00e      	beq.n	80079e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	6852      	ldr	r2, [r2, #4]
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	4611      	mov	r1, r2
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	4798      	blx	r3
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80079e0:	2303      	movs	r3, #3
 80079e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b086      	sub	sp, #24
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	885b      	ldrh	r3, [r3, #2]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d920      	bls.n	8007a8c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a52:	e013      	b.n	8007a7c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a54:	f107 030a 	add.w	r3, r7, #10
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6978      	ldr	r0, [r7, #20]
 8007a5c:	f000 f81b 	bl	8007a96 <USBD_GetNextDesc>
 8007a60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	2b05      	cmp	r3, #5
 8007a68:	d108      	bne.n	8007a7c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	789b      	ldrb	r3, [r3, #2]
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d008      	beq.n	8007a8a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	885b      	ldrh	r3, [r3, #2]
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	897b      	ldrh	r3, [r7, #10]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d8e5      	bhi.n	8007a54 <USBD_GetEpDesc+0x32>
 8007a88:	e000      	b.n	8007a8c <USBD_GetEpDesc+0x6a>
          break;
 8007a8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a8c:	693b      	ldr	r3, [r7, #16]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b085      	sub	sp, #20
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	881a      	ldrh	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	4413      	add	r3, r2
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4413      	add	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007aee:	8a3b      	ldrh	r3, [r7, #16]
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	b21a      	sxth	r2, r3
 8007af4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	b21b      	sxth	r3, r3
 8007afc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007afe:	89fb      	ldrh	r3, [r7, #14]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b22:	2b40      	cmp	r3, #64	; 0x40
 8007b24:	d005      	beq.n	8007b32 <USBD_StdDevReq+0x26>
 8007b26:	2b40      	cmp	r3, #64	; 0x40
 8007b28:	d857      	bhi.n	8007bda <USBD_StdDevReq+0xce>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00f      	beq.n	8007b4e <USBD_StdDevReq+0x42>
 8007b2e:	2b20      	cmp	r3, #32
 8007b30:	d153      	bne.n	8007bda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	32ae      	adds	r2, #174	; 0xae
 8007b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4c:	e04a      	b.n	8007be4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	2b09      	cmp	r3, #9
 8007b54:	d83b      	bhi.n	8007bce <USBD_StdDevReq+0xc2>
 8007b56:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <USBD_StdDevReq+0x50>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007bb1 	.word	0x08007bb1
 8007b60:	08007bc5 	.word	0x08007bc5
 8007b64:	08007bcf 	.word	0x08007bcf
 8007b68:	08007bbb 	.word	0x08007bbb
 8007b6c:	08007bcf 	.word	0x08007bcf
 8007b70:	08007b8f 	.word	0x08007b8f
 8007b74:	08007b85 	.word	0x08007b85
 8007b78:	08007bcf 	.word	0x08007bcf
 8007b7c:	08007ba7 	.word	0x08007ba7
 8007b80:	08007b99 	.word	0x08007b99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fa3c 	bl	8008004 <USBD_GetDescriptor>
          break;
 8007b8c:	e024      	b.n	8007bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fba1 	bl	80082d8 <USBD_SetAddress>
          break;
 8007b96:	e01f      	b.n	8007bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fbe0 	bl	8008360 <USBD_SetConfig>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73fb      	strb	r3, [r7, #15]
          break;
 8007ba4:	e018      	b.n	8007bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fc83 	bl	80084b4 <USBD_GetConfig>
          break;
 8007bae:	e013      	b.n	8007bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fcb4 	bl	8008520 <USBD_GetStatus>
          break;
 8007bb8:	e00e      	b.n	8007bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fce3 	bl	8008588 <USBD_SetFeature>
          break;
 8007bc2:	e009      	b.n	8007bd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fd07 	bl	80085da <USBD_ClrFeature>
          break;
 8007bcc:	e004      	b.n	8007bd8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fd5e 	bl	8008692 <USBD_CtlError>
          break;
 8007bd6:	bf00      	nop
      }
      break;
 8007bd8:	e004      	b.n	8007be4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fd58 	bl	8008692 <USBD_CtlError>
      break;
 8007be2:	bf00      	nop
  }

  return ret;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop

08007bf0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c06:	2b40      	cmp	r3, #64	; 0x40
 8007c08:	d005      	beq.n	8007c16 <USBD_StdItfReq+0x26>
 8007c0a:	2b40      	cmp	r3, #64	; 0x40
 8007c0c:	d852      	bhi.n	8007cb4 <USBD_StdItfReq+0xc4>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <USBD_StdItfReq+0x26>
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	d14e      	bne.n	8007cb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d840      	bhi.n	8007ca6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	889b      	ldrh	r3, [r3, #4]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d836      	bhi.n	8007c9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	889b      	ldrh	r3, [r3, #4]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7ff fed9 	bl	80079ee <USBD_CoreFindIF>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	2bff      	cmp	r3, #255	; 0xff
 8007c44:	d01d      	beq.n	8007c82 <USBD_StdItfReq+0x92>
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d11a      	bne.n	8007c82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c4c:	7bba      	ldrb	r2, [r7, #14]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	32ae      	adds	r2, #174	; 0xae
 8007c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00f      	beq.n	8007c7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c5c:	7bba      	ldrb	r2, [r7, #14]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c64:	7bba      	ldrb	r2, [r7, #14]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	32ae      	adds	r2, #174	; 0xae
 8007c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c7a:	e004      	b.n	8007c86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c80:	e001      	b.n	8007c86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c82:	2303      	movs	r3, #3
 8007c84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	88db      	ldrh	r3, [r3, #6]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d110      	bne.n	8007cb0 <USBD_StdItfReq+0xc0>
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10d      	bne.n	8007cb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fdc7 	bl	8008828 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c9a:	e009      	b.n	8007cb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fcf7 	bl	8008692 <USBD_CtlError>
          break;
 8007ca4:	e004      	b.n	8007cb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fcf2 	bl	8008692 <USBD_CtlError>
          break;
 8007cae:	e000      	b.n	8007cb2 <USBD_StdItfReq+0xc2>
          break;
 8007cb0:	bf00      	nop
      }
      break;
 8007cb2:	e004      	b.n	8007cbe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fceb 	bl	8008692 <USBD_CtlError>
      break;
 8007cbc:	bf00      	nop
  }

  return ret;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	889b      	ldrh	r3, [r3, #4]
 8007cda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ce4:	2b40      	cmp	r3, #64	; 0x40
 8007ce6:	d007      	beq.n	8007cf8 <USBD_StdEPReq+0x30>
 8007ce8:	2b40      	cmp	r3, #64	; 0x40
 8007cea:	f200 817f 	bhi.w	8007fec <USBD_StdEPReq+0x324>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d02a      	beq.n	8007d48 <USBD_StdEPReq+0x80>
 8007cf2:	2b20      	cmp	r3, #32
 8007cf4:	f040 817a 	bne.w	8007fec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff fe83 	bl	8007a08 <USBD_CoreFindEP>
 8007d02:	4603      	mov	r3, r0
 8007d04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d06:	7b7b      	ldrb	r3, [r7, #13]
 8007d08:	2bff      	cmp	r3, #255	; 0xff
 8007d0a:	f000 8174 	beq.w	8007ff6 <USBD_StdEPReq+0x32e>
 8007d0e:	7b7b      	ldrb	r3, [r7, #13]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f040 8170 	bne.w	8007ff6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d16:	7b7a      	ldrb	r2, [r7, #13]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d1e:	7b7a      	ldrb	r2, [r7, #13]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	32ae      	adds	r2, #174	; 0xae
 8007d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 8163 	beq.w	8007ff6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d30:	7b7a      	ldrb	r2, [r7, #13]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	32ae      	adds	r2, #174	; 0xae
 8007d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	4798      	blx	r3
 8007d42:	4603      	mov	r3, r0
 8007d44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d46:	e156      	b.n	8007ff6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	785b      	ldrb	r3, [r3, #1]
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d008      	beq.n	8007d62 <USBD_StdEPReq+0x9a>
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	f300 8145 	bgt.w	8007fe0 <USBD_StdEPReq+0x318>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 809b 	beq.w	8007e92 <USBD_StdEPReq+0x1ca>
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d03c      	beq.n	8007dda <USBD_StdEPReq+0x112>
 8007d60:	e13e      	b.n	8007fe0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d002      	beq.n	8007d74 <USBD_StdEPReq+0xac>
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d016      	beq.n	8007da0 <USBD_StdEPReq+0xd8>
 8007d72:	e02c      	b.n	8007dce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00d      	beq.n	8007d96 <USBD_StdEPReq+0xce>
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	2b80      	cmp	r3, #128	; 0x80
 8007d7e:	d00a      	beq.n	8007d96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 f93d 	bl	8009004 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d8a:	2180      	movs	r1, #128	; 0x80
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 f939 	bl	8009004 <USBD_LL_StallEP>
 8007d92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d94:	e020      	b.n	8007dd8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fc7a 	bl	8008692 <USBD_CtlError>
              break;
 8007d9e:	e01b      	b.n	8007dd8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	885b      	ldrh	r3, [r3, #2]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10e      	bne.n	8007dc6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00b      	beq.n	8007dc6 <USBD_StdEPReq+0xfe>
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b80      	cmp	r3, #128	; 0x80
 8007db2:	d008      	beq.n	8007dc6 <USBD_StdEPReq+0xfe>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	88db      	ldrh	r3, [r3, #6]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d104      	bne.n	8007dc6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 f91f 	bl	8009004 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fd2e 	bl	8008828 <USBD_CtlSendStatus>

              break;
 8007dcc:	e004      	b.n	8007dd8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fc5e 	bl	8008692 <USBD_CtlError>
              break;
 8007dd6:	bf00      	nop
          }
          break;
 8007dd8:	e107      	b.n	8007fea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d002      	beq.n	8007dec <USBD_StdEPReq+0x124>
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d016      	beq.n	8007e18 <USBD_StdEPReq+0x150>
 8007dea:	e04b      	b.n	8007e84 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00d      	beq.n	8007e0e <USBD_StdEPReq+0x146>
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b80      	cmp	r3, #128	; 0x80
 8007df6:	d00a      	beq.n	8007e0e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 f901 	bl	8009004 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e02:	2180      	movs	r1, #128	; 0x80
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 f8fd 	bl	8009004 <USBD_LL_StallEP>
 8007e0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e0c:	e040      	b.n	8007e90 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fc3e 	bl	8008692 <USBD_CtlError>
              break;
 8007e16:	e03b      	b.n	8007e90 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	885b      	ldrh	r3, [r3, #2]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d136      	bne.n	8007e8e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d004      	beq.n	8007e34 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 f907 	bl	8009042 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fcf7 	bl	8008828 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff fde2 	bl	8007a08 <USBD_CoreFindEP>
 8007e44:	4603      	mov	r3, r0
 8007e46:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e48:	7b7b      	ldrb	r3, [r7, #13]
 8007e4a:	2bff      	cmp	r3, #255	; 0xff
 8007e4c:	d01f      	beq.n	8007e8e <USBD_StdEPReq+0x1c6>
 8007e4e:	7b7b      	ldrb	r3, [r7, #13]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d11c      	bne.n	8007e8e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e54:	7b7a      	ldrb	r2, [r7, #13]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e5c:	7b7a      	ldrb	r2, [r7, #13]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	32ae      	adds	r2, #174	; 0xae
 8007e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d010      	beq.n	8007e8e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e6c:	7b7a      	ldrb	r2, [r7, #13]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	32ae      	adds	r2, #174	; 0xae
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e82:	e004      	b.n	8007e8e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fc03 	bl	8008692 <USBD_CtlError>
              break;
 8007e8c:	e000      	b.n	8007e90 <USBD_StdEPReq+0x1c8>
              break;
 8007e8e:	bf00      	nop
          }
          break;
 8007e90:	e0ab      	b.n	8007fea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d002      	beq.n	8007ea4 <USBD_StdEPReq+0x1dc>
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d032      	beq.n	8007f08 <USBD_StdEPReq+0x240>
 8007ea2:	e097      	b.n	8007fd4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d007      	beq.n	8007eba <USBD_StdEPReq+0x1f2>
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	2b80      	cmp	r3, #128	; 0x80
 8007eae:	d004      	beq.n	8007eba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fbed 	bl	8008692 <USBD_CtlError>
                break;
 8007eb8:	e091      	b.n	8007fde <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	da0b      	bge.n	8007eda <USBD_StdEPReq+0x212>
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ec8:	4613      	mov	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	3310      	adds	r3, #16
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	e00b      	b.n	8007ef2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	4413      	add	r3, r2
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2202      	movs	r2, #2
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fc37 	bl	8008774 <USBD_CtlSendData>
              break;
 8007f06:	e06a      	b.n	8007fde <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	da11      	bge.n	8007f34 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	f003 020f 	and.w	r2, r3, #15
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	440b      	add	r3, r1
 8007f22:	3324      	adds	r3, #36	; 0x24
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d117      	bne.n	8007f5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fbb0 	bl	8008692 <USBD_CtlError>
                  break;
 8007f32:	e054      	b.n	8007fde <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	f003 020f 	and.w	r2, r3, #15
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	440b      	add	r3, r1
 8007f46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d104      	bne.n	8007f5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fb9d 	bl	8008692 <USBD_CtlError>
                  break;
 8007f58:	e041      	b.n	8007fde <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	da0b      	bge.n	8007f7a <USBD_StdEPReq+0x2b2>
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	3310      	adds	r3, #16
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	4413      	add	r3, r2
 8007f76:	3304      	adds	r3, #4
 8007f78:	e00b      	b.n	8007f92 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f80:	4613      	mov	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	4413      	add	r3, r2
 8007f90:	3304      	adds	r3, #4
 8007f92:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <USBD_StdEPReq+0x2d8>
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	2b80      	cmp	r3, #128	; 0x80
 8007f9e:	d103      	bne.n	8007fa8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	e00e      	b.n	8007fc6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 f867 	bl	8009080 <USBD_LL_IsStallEP>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	e002      	b.n	8007fc6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fbd1 	bl	8008774 <USBD_CtlSendData>
              break;
 8007fd2:	e004      	b.n	8007fde <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fb5b 	bl	8008692 <USBD_CtlError>
              break;
 8007fdc:	bf00      	nop
          }
          break;
 8007fde:	e004      	b.n	8007fea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fb55 	bl	8008692 <USBD_CtlError>
          break;
 8007fe8:	bf00      	nop
      }
      break;
 8007fea:	e005      	b.n	8007ff8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fb4f 	bl	8008692 <USBD_CtlError>
      break;
 8007ff4:	e000      	b.n	8007ff8 <USBD_StdEPReq+0x330>
      break;
 8007ff6:	bf00      	nop
  }

  return ret;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	885b      	ldrh	r3, [r3, #2]
 800801e:	0a1b      	lsrs	r3, r3, #8
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	2b06      	cmp	r3, #6
 8008026:	f200 8128 	bhi.w	800827a <USBD_GetDescriptor+0x276>
 800802a:	a201      	add	r2, pc, #4	; (adr r2, 8008030 <USBD_GetDescriptor+0x2c>)
 800802c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008030:	0800804d 	.word	0x0800804d
 8008034:	08008065 	.word	0x08008065
 8008038:	080080a5 	.word	0x080080a5
 800803c:	0800827b 	.word	0x0800827b
 8008040:	0800827b 	.word	0x0800827b
 8008044:	0800821b 	.word	0x0800821b
 8008048:	08008247 	.word	0x08008247
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	7c12      	ldrb	r2, [r2, #16]
 8008058:	f107 0108 	add.w	r1, r7, #8
 800805c:	4610      	mov	r0, r2
 800805e:	4798      	blx	r3
 8008060:	60f8      	str	r0, [r7, #12]
      break;
 8008062:	e112      	b.n	800828a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	7c1b      	ldrb	r3, [r3, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10d      	bne.n	8008088 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008074:	f107 0208 	add.w	r2, r7, #8
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	2202      	movs	r2, #2
 8008084:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008086:	e100      	b.n	800828a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	f107 0208 	add.w	r2, r7, #8
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
 8008098:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	2202      	movs	r2, #2
 80080a0:	701a      	strb	r2, [r3, #0]
      break;
 80080a2:	e0f2      	b.n	800828a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	885b      	ldrh	r3, [r3, #2]
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b05      	cmp	r3, #5
 80080ac:	f200 80ac 	bhi.w	8008208 <USBD_GetDescriptor+0x204>
 80080b0:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <USBD_GetDescriptor+0xb4>)
 80080b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b6:	bf00      	nop
 80080b8:	080080d1 	.word	0x080080d1
 80080bc:	08008105 	.word	0x08008105
 80080c0:	08008139 	.word	0x08008139
 80080c4:	0800816d 	.word	0x0800816d
 80080c8:	080081a1 	.word	0x080081a1
 80080cc:	080081d5 	.word	0x080081d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	7c12      	ldrb	r2, [r2, #16]
 80080e8:	f107 0108 	add.w	r1, r7, #8
 80080ec:	4610      	mov	r0, r2
 80080ee:	4798      	blx	r3
 80080f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080f2:	e091      	b.n	8008218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 facb 	bl	8008692 <USBD_CtlError>
            err++;
 80080fc:	7afb      	ldrb	r3, [r7, #11]
 80080fe:	3301      	adds	r3, #1
 8008100:	72fb      	strb	r3, [r7, #11]
          break;
 8008102:	e089      	b.n	8008218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	7c12      	ldrb	r2, [r2, #16]
 800811c:	f107 0108 	add.w	r1, r7, #8
 8008120:	4610      	mov	r0, r2
 8008122:	4798      	blx	r3
 8008124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008126:	e077      	b.n	8008218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fab1 	bl	8008692 <USBD_CtlError>
            err++;
 8008130:	7afb      	ldrb	r3, [r7, #11]
 8008132:	3301      	adds	r3, #1
 8008134:	72fb      	strb	r3, [r7, #11]
          break;
 8008136:	e06f      	b.n	8008218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00b      	beq.n	800815c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	7c12      	ldrb	r2, [r2, #16]
 8008150:	f107 0108 	add.w	r1, r7, #8
 8008154:	4610      	mov	r0, r2
 8008156:	4798      	blx	r3
 8008158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800815a:	e05d      	b.n	8008218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fa97 	bl	8008692 <USBD_CtlError>
            err++;
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	3301      	adds	r3, #1
 8008168:	72fb      	strb	r3, [r7, #11]
          break;
 800816a:	e055      	b.n	8008218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	7c12      	ldrb	r2, [r2, #16]
 8008184:	f107 0108 	add.w	r1, r7, #8
 8008188:	4610      	mov	r0, r2
 800818a:	4798      	blx	r3
 800818c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800818e:	e043      	b.n	8008218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa7d 	bl	8008692 <USBD_CtlError>
            err++;
 8008198:	7afb      	ldrb	r3, [r7, #11]
 800819a:	3301      	adds	r3, #1
 800819c:	72fb      	strb	r3, [r7, #11]
          break;
 800819e:	e03b      	b.n	8008218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	7c12      	ldrb	r2, [r2, #16]
 80081b8:	f107 0108 	add.w	r1, r7, #8
 80081bc:	4610      	mov	r0, r2
 80081be:	4798      	blx	r3
 80081c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081c2:	e029      	b.n	8008218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa63 	bl	8008692 <USBD_CtlError>
            err++;
 80081cc:	7afb      	ldrb	r3, [r7, #11]
 80081ce:	3301      	adds	r3, #1
 80081d0:	72fb      	strb	r3, [r7, #11]
          break;
 80081d2:	e021      	b.n	8008218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00b      	beq.n	80081f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	7c12      	ldrb	r2, [r2, #16]
 80081ec:	f107 0108 	add.w	r1, r7, #8
 80081f0:	4610      	mov	r0, r2
 80081f2:	4798      	blx	r3
 80081f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081f6:	e00f      	b.n	8008218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fa49 	bl	8008692 <USBD_CtlError>
            err++;
 8008200:	7afb      	ldrb	r3, [r7, #11]
 8008202:	3301      	adds	r3, #1
 8008204:	72fb      	strb	r3, [r7, #11]
          break;
 8008206:	e007      	b.n	8008218 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa41 	bl	8008692 <USBD_CtlError>
          err++;
 8008210:	7afb      	ldrb	r3, [r7, #11]
 8008212:	3301      	adds	r3, #1
 8008214:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008216:	bf00      	nop
      }
      break;
 8008218:	e037      	b.n	800828a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	7c1b      	ldrb	r3, [r3, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d109      	bne.n	8008236 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822a:	f107 0208 	add.w	r2, r7, #8
 800822e:	4610      	mov	r0, r2
 8008230:	4798      	blx	r3
 8008232:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008234:	e029      	b.n	800828a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fa2a 	bl	8008692 <USBD_CtlError>
        err++;
 800823e:	7afb      	ldrb	r3, [r7, #11]
 8008240:	3301      	adds	r3, #1
 8008242:	72fb      	strb	r3, [r7, #11]
      break;
 8008244:	e021      	b.n	800828a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	7c1b      	ldrb	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10d      	bne.n	800826a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008256:	f107 0208 	add.w	r2, r7, #8
 800825a:	4610      	mov	r0, r2
 800825c:	4798      	blx	r3
 800825e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3301      	adds	r3, #1
 8008264:	2207      	movs	r2, #7
 8008266:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008268:	e00f      	b.n	800828a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fa10 	bl	8008692 <USBD_CtlError>
        err++;
 8008272:	7afb      	ldrb	r3, [r7, #11]
 8008274:	3301      	adds	r3, #1
 8008276:	72fb      	strb	r3, [r7, #11]
      break;
 8008278:	e007      	b.n	800828a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fa08 	bl	8008692 <USBD_CtlError>
      err++;
 8008282:	7afb      	ldrb	r3, [r7, #11]
 8008284:	3301      	adds	r3, #1
 8008286:	72fb      	strb	r3, [r7, #11]
      break;
 8008288:	bf00      	nop
  }

  if (err != 0U)
 800828a:	7afb      	ldrb	r3, [r7, #11]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d11e      	bne.n	80082ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	88db      	ldrh	r3, [r3, #6]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d016      	beq.n	80082c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008298:	893b      	ldrh	r3, [r7, #8]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00e      	beq.n	80082bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	88da      	ldrh	r2, [r3, #6]
 80082a2:	893b      	ldrh	r3, [r7, #8]
 80082a4:	4293      	cmp	r3, r2
 80082a6:	bf28      	it	cs
 80082a8:	4613      	movcs	r3, r2
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082ae:	893b      	ldrh	r3, [r7, #8]
 80082b0:	461a      	mov	r2, r3
 80082b2:	68f9      	ldr	r1, [r7, #12]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fa5d 	bl	8008774 <USBD_CtlSendData>
 80082ba:	e009      	b.n	80082d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f9e7 	bl	8008692 <USBD_CtlError>
 80082c4:	e004      	b.n	80082d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 faae 	bl	8008828 <USBD_CtlSendStatus>
 80082cc:	e000      	b.n	80082d0 <USBD_GetDescriptor+0x2cc>
    return;
 80082ce:	bf00      	nop
  }
}
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop

080082d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	889b      	ldrh	r3, [r3, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d131      	bne.n	800834e <USBD_SetAddress+0x76>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	88db      	ldrh	r3, [r3, #6]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d12d      	bne.n	800834e <USBD_SetAddress+0x76>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	885b      	ldrh	r3, [r3, #2]
 80082f6:	2b7f      	cmp	r3, #127	; 0x7f
 80082f8:	d829      	bhi.n	800834e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	885b      	ldrh	r3, [r3, #2]
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008304:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b03      	cmp	r3, #3
 8008310:	d104      	bne.n	800831c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f9bc 	bl	8008692 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831a:	e01d      	b.n	8008358 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	7bfa      	ldrb	r2, [r7, #15]
 8008320:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fed5 	bl	80090d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa7a 	bl	8008828 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d004      	beq.n	8008344 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2202      	movs	r2, #2
 800833e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008342:	e009      	b.n	8008358 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834c:	e004      	b.n	8008358 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f99e 	bl	8008692 <USBD_CtlError>
  }
}
 8008356:	bf00      	nop
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	885b      	ldrh	r3, [r3, #2]
 8008372:	b2da      	uxtb	r2, r3
 8008374:	4b4e      	ldr	r3, [pc, #312]	; (80084b0 <USBD_SetConfig+0x150>)
 8008376:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008378:	4b4d      	ldr	r3, [pc, #308]	; (80084b0 <USBD_SetConfig+0x150>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d905      	bls.n	800838c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f985 	bl	8008692 <USBD_CtlError>
    return USBD_FAIL;
 8008388:	2303      	movs	r3, #3
 800838a:	e08c      	b.n	80084a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b02      	cmp	r3, #2
 8008396:	d002      	beq.n	800839e <USBD_SetConfig+0x3e>
 8008398:	2b03      	cmp	r3, #3
 800839a:	d029      	beq.n	80083f0 <USBD_SetConfig+0x90>
 800839c:	e075      	b.n	800848a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800839e:	4b44      	ldr	r3, [pc, #272]	; (80084b0 <USBD_SetConfig+0x150>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d020      	beq.n	80083e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80083a6:	4b42      	ldr	r3, [pc, #264]	; (80084b0 <USBD_SetConfig+0x150>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083b0:	4b3f      	ldr	r3, [pc, #252]	; (80084b0 <USBD_SetConfig+0x150>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7fe ffe7 	bl	800738a <USBD_SetClassConfig>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d008      	beq.n	80083d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f962 	bl	8008692 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2202      	movs	r2, #2
 80083d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083d6:	e065      	b.n	80084a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fa25 	bl	8008828 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2203      	movs	r2, #3
 80083e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80083e6:	e05d      	b.n	80084a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fa1d 	bl	8008828 <USBD_CtlSendStatus>
      break;
 80083ee:	e059      	b.n	80084a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80083f0:	4b2f      	ldr	r3, [pc, #188]	; (80084b0 <USBD_SetConfig+0x150>)
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d112      	bne.n	800841e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008400:	4b2b      	ldr	r3, [pc, #172]	; (80084b0 <USBD_SetConfig+0x150>)
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800840a:	4b29      	ldr	r3, [pc, #164]	; (80084b0 <USBD_SetConfig+0x150>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7fe ffd6 	bl	80073c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa06 	bl	8008828 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800841c:	e042      	b.n	80084a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800841e:	4b24      	ldr	r3, [pc, #144]	; (80084b0 <USBD_SetConfig+0x150>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	429a      	cmp	r2, r3
 800842a:	d02a      	beq.n	8008482 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	b2db      	uxtb	r3, r3
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7fe ffc4 	bl	80073c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800843a:	4b1d      	ldr	r3, [pc, #116]	; (80084b0 <USBD_SetConfig+0x150>)
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008444:	4b1a      	ldr	r3, [pc, #104]	; (80084b0 <USBD_SetConfig+0x150>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7fe ff9d 	bl	800738a <USBD_SetClassConfig>
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00f      	beq.n	800847a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f918 	bl	8008692 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7fe ffa9 	bl	80073c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008478:	e014      	b.n	80084a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f9d4 	bl	8008828 <USBD_CtlSendStatus>
      break;
 8008480:	e010      	b.n	80084a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f9d0 	bl	8008828 <USBD_CtlSendStatus>
      break;
 8008488:	e00c      	b.n	80084a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f900 	bl	8008692 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008492:	4b07      	ldr	r3, [pc, #28]	; (80084b0 <USBD_SetConfig+0x150>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7fe ff92 	bl	80073c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800849e:	2303      	movs	r3, #3
 80084a0:	73fb      	strb	r3, [r7, #15]
      break;
 80084a2:	bf00      	nop
  }

  return ret;
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	200001fc 	.word	0x200001fc

080084b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	88db      	ldrh	r3, [r3, #6]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d004      	beq.n	80084d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f8e2 	bl	8008692 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084ce:	e023      	b.n	8008518 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b02      	cmp	r3, #2
 80084da:	dc02      	bgt.n	80084e2 <USBD_GetConfig+0x2e>
 80084dc:	2b00      	cmp	r3, #0
 80084de:	dc03      	bgt.n	80084e8 <USBD_GetConfig+0x34>
 80084e0:	e015      	b.n	800850e <USBD_GetConfig+0x5a>
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d00b      	beq.n	80084fe <USBD_GetConfig+0x4a>
 80084e6:	e012      	b.n	800850e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	3308      	adds	r3, #8
 80084f2:	2201      	movs	r2, #1
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f93c 	bl	8008774 <USBD_CtlSendData>
        break;
 80084fc:	e00c      	b.n	8008518 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3304      	adds	r3, #4
 8008502:	2201      	movs	r2, #1
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f934 	bl	8008774 <USBD_CtlSendData>
        break;
 800850c:	e004      	b.n	8008518 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f8be 	bl	8008692 <USBD_CtlError>
        break;
 8008516:	bf00      	nop
}
 8008518:	bf00      	nop
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	3b01      	subs	r3, #1
 8008534:	2b02      	cmp	r3, #2
 8008536:	d81e      	bhi.n	8008576 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	88db      	ldrh	r3, [r3, #6]
 800853c:	2b02      	cmp	r3, #2
 800853e:	d004      	beq.n	800854a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f8a5 	bl	8008692 <USBD_CtlError>
        break;
 8008548:	e01a      	b.n	8008580 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008556:	2b00      	cmp	r3, #0
 8008558:	d005      	beq.n	8008566 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	f043 0202 	orr.w	r2, r3, #2
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	330c      	adds	r3, #12
 800856a:	2202      	movs	r2, #2
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f900 	bl	8008774 <USBD_CtlSendData>
      break;
 8008574:	e004      	b.n	8008580 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f88a 	bl	8008692 <USBD_CtlError>
      break;
 800857e:	bf00      	nop
  }
}
 8008580:	bf00      	nop
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	885b      	ldrh	r3, [r3, #2]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d107      	bne.n	80085aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f940 	bl	8008828 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80085a8:	e013      	b.n	80085d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	885b      	ldrh	r3, [r3, #2]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d10b      	bne.n	80085ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	889b      	ldrh	r3, [r3, #4]
 80085b6:	0a1b      	lsrs	r3, r3, #8
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f930 	bl	8008828 <USBD_CtlSendStatus>
}
 80085c8:	e003      	b.n	80085d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f860 	bl	8008692 <USBD_CtlError>
}
 80085d2:	bf00      	nop
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	3b01      	subs	r3, #1
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d80b      	bhi.n	800860a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	885b      	ldrh	r3, [r3, #2]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d10c      	bne.n	8008614 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f910 	bl	8008828 <USBD_CtlSendStatus>
      }
      break;
 8008608:	e004      	b.n	8008614 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f840 	bl	8008692 <USBD_CtlError>
      break;
 8008612:	e000      	b.n	8008616 <USBD_ClrFeature+0x3c>
      break;
 8008614:	bf00      	nop
  }
}
 8008616:	bf00      	nop
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	781a      	ldrb	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3301      	adds	r3, #1
 8008638:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	781a      	ldrb	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3301      	adds	r3, #1
 8008646:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f7ff fa41 	bl	8007ad0 <SWAPBYTE>
 800864e:	4603      	mov	r3, r0
 8008650:	461a      	mov	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3301      	adds	r3, #1
 800865a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3301      	adds	r3, #1
 8008660:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f7ff fa34 	bl	8007ad0 <SWAPBYTE>
 8008668:	4603      	mov	r3, r0
 800866a:	461a      	mov	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3301      	adds	r3, #1
 8008674:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff fa27 	bl	8007ad0 <SWAPBYTE>
 8008682:	4603      	mov	r3, r0
 8008684:	461a      	mov	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	80da      	strh	r2, [r3, #6]
}
 800868a:	bf00      	nop
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800869c:	2180      	movs	r1, #128	; 0x80
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fcb0 	bl	8009004 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086a4:	2100      	movs	r1, #0
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fcac 	bl	8009004 <USBD_LL_StallEP>
}
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d036      	beq.n	8008738 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80086ce:	6938      	ldr	r0, [r7, #16]
 80086d0:	f000 f836 	bl	8008740 <USBD_GetLen>
 80086d4:	4603      	mov	r3, r0
 80086d6:	3301      	adds	r3, #1
 80086d8:	b29b      	uxth	r3, r3
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	4413      	add	r3, r2
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	7812      	ldrb	r2, [r2, #0]
 80086ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
 80086f0:	3301      	adds	r3, #1
 80086f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	4413      	add	r3, r2
 80086fa:	2203      	movs	r2, #3
 80086fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	3301      	adds	r3, #1
 8008702:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008704:	e013      	b.n	800872e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	4413      	add	r3, r2
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	7812      	ldrb	r2, [r2, #0]
 8008710:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	3301      	adds	r3, #1
 8008716:	613b      	str	r3, [r7, #16]
    idx++;
 8008718:	7dfb      	ldrb	r3, [r7, #23]
 800871a:	3301      	adds	r3, #1
 800871c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	4413      	add	r3, r2
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]
    idx++;
 8008728:	7dfb      	ldrb	r3, [r7, #23]
 800872a:	3301      	adds	r3, #1
 800872c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e7      	bne.n	8008706 <USBD_GetString+0x52>
 8008736:	e000      	b.n	800873a <USBD_GetString+0x86>
    return;
 8008738:	bf00      	nop
  }
}
 800873a:	3718      	adds	r7, #24
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008750:	e005      	b.n	800875e <USBD_GetLen+0x1e>
  {
    len++;
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	3301      	adds	r3, #1
 8008756:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	3301      	adds	r3, #1
 800875c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1f5      	bne.n	8008752 <USBD_GetLen+0x12>
  }

  return len;
 8008766:	7bfb      	ldrb	r3, [r7, #15]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2202      	movs	r2, #2
 8008784:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	2100      	movs	r1, #0
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 fcbb 	bl	8009116 <USBD_LL_Transmit>

  return USBD_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	2100      	movs	r1, #0
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 fcaa 	bl	8009116 <USBD_LL_Transmit>

  return USBD_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2203      	movs	r2, #3
 80087dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	2100      	movs	r1, #0
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 fcae 	bl	8009158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	2100      	movs	r1, #0
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fc9d 	bl	8009158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2204      	movs	r2, #4
 8008834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008838:	2300      	movs	r3, #0
 800883a:	2200      	movs	r2, #0
 800883c:	2100      	movs	r1, #0
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fc69 	bl	8009116 <USBD_LL_Transmit>

  return USBD_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2205      	movs	r2, #5
 800885a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800885e:	2300      	movs	r3, #0
 8008860:	2200      	movs	r2, #0
 8008862:	2100      	movs	r1, #0
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fc77 	bl	8009158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008878:	2200      	movs	r2, #0
 800887a:	4912      	ldr	r1, [pc, #72]	; (80088c4 <MX_USB_DEVICE_Init+0x50>)
 800887c:	4812      	ldr	r0, [pc, #72]	; (80088c8 <MX_USB_DEVICE_Init+0x54>)
 800887e:	f7fe fd07 	bl	8007290 <USBD_Init>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008888:	f7f7 ff90 	bl	80007ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800888c:	490f      	ldr	r1, [pc, #60]	; (80088cc <MX_USB_DEVICE_Init+0x58>)
 800888e:	480e      	ldr	r0, [pc, #56]	; (80088c8 <MX_USB_DEVICE_Init+0x54>)
 8008890:	f7fe fd2e 	bl	80072f0 <USBD_RegisterClass>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800889a:	f7f7 ff87 	bl	80007ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800889e:	490c      	ldr	r1, [pc, #48]	; (80088d0 <MX_USB_DEVICE_Init+0x5c>)
 80088a0:	4809      	ldr	r0, [pc, #36]	; (80088c8 <MX_USB_DEVICE_Init+0x54>)
 80088a2:	f7fe fc65 	bl	8007170 <USBD_CDC_RegisterInterface>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088ac:	f7f7 ff7e 	bl	80007ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088b0:	4805      	ldr	r0, [pc, #20]	; (80088c8 <MX_USB_DEVICE_Init+0x54>)
 80088b2:	f7fe fd53 	bl	800735c <USBD_Start>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088bc:	f7f7 ff76 	bl	80007ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088c0:	bf00      	nop
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	200000ac 	.word	0x200000ac
 80088c8:	20000200 	.word	0x20000200
 80088cc:	20000018 	.word	0x20000018
 80088d0:	20000098 	.word	0x20000098

080088d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80088d8:	2200      	movs	r2, #0
 80088da:	4905      	ldr	r1, [pc, #20]	; (80088f0 <CDC_Init_FS+0x1c>)
 80088dc:	4805      	ldr	r0, [pc, #20]	; (80088f4 <CDC_Init_FS+0x20>)
 80088de:	f7fe fc61 	bl	80071a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80088e2:	4905      	ldr	r1, [pc, #20]	; (80088f8 <CDC_Init_FS+0x24>)
 80088e4:	4803      	ldr	r0, [pc, #12]	; (80088f4 <CDC_Init_FS+0x20>)
 80088e6:	f7fe fc7f 	bl	80071e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80088ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	20000cdc 	.word	0x20000cdc
 80088f4:	20000200 	.word	0x20000200
 80088f8:	200004dc 	.word	0x200004dc

080088fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088fc:	b480      	push	{r7}
 80088fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008900:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008902:	4618      	mov	r0, r3
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	6039      	str	r1, [r7, #0]
 8008916:	71fb      	strb	r3, [r7, #7]
 8008918:	4613      	mov	r3, r2
 800891a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	2b23      	cmp	r3, #35	; 0x23
 8008920:	d84a      	bhi.n	80089b8 <CDC_Control_FS+0xac>
 8008922:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <CDC_Control_FS+0x1c>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	080089b9 	.word	0x080089b9
 800892c:	080089b9 	.word	0x080089b9
 8008930:	080089b9 	.word	0x080089b9
 8008934:	080089b9 	.word	0x080089b9
 8008938:	080089b9 	.word	0x080089b9
 800893c:	080089b9 	.word	0x080089b9
 8008940:	080089b9 	.word	0x080089b9
 8008944:	080089b9 	.word	0x080089b9
 8008948:	080089b9 	.word	0x080089b9
 800894c:	080089b9 	.word	0x080089b9
 8008950:	080089b9 	.word	0x080089b9
 8008954:	080089b9 	.word	0x080089b9
 8008958:	080089b9 	.word	0x080089b9
 800895c:	080089b9 	.word	0x080089b9
 8008960:	080089b9 	.word	0x080089b9
 8008964:	080089b9 	.word	0x080089b9
 8008968:	080089b9 	.word	0x080089b9
 800896c:	080089b9 	.word	0x080089b9
 8008970:	080089b9 	.word	0x080089b9
 8008974:	080089b9 	.word	0x080089b9
 8008978:	080089b9 	.word	0x080089b9
 800897c:	080089b9 	.word	0x080089b9
 8008980:	080089b9 	.word	0x080089b9
 8008984:	080089b9 	.word	0x080089b9
 8008988:	080089b9 	.word	0x080089b9
 800898c:	080089b9 	.word	0x080089b9
 8008990:	080089b9 	.word	0x080089b9
 8008994:	080089b9 	.word	0x080089b9
 8008998:	080089b9 	.word	0x080089b9
 800899c:	080089b9 	.word	0x080089b9
 80089a0:	080089b9 	.word	0x080089b9
 80089a4:	080089b9 	.word	0x080089b9
 80089a8:	080089b9 	.word	0x080089b9
 80089ac:	080089b9 	.word	0x080089b9
 80089b0:	080089b9 	.word	0x080089b9
 80089b4:	080089b9 	.word	0x080089b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80089b8:	bf00      	nop
  }

  return (USBD_OK);
 80089ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80089d2:	6879      	ldr	r1, [r7, #4]
 80089d4:	4805      	ldr	r0, [pc, #20]	; (80089ec <CDC_Receive_FS+0x24>)
 80089d6:	f7fe fc07 	bl	80071e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80089da:	4804      	ldr	r0, [pc, #16]	; (80089ec <CDC_Receive_FS+0x24>)
 80089dc:	f7fe fc22 	bl	8007224 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80089e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	20000200 	.word	0x20000200

080089f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	4613      	mov	r3, r2
 80089fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
	...

08008a14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	6039      	str	r1, [r7, #0]
 8008a1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2212      	movs	r2, #18
 8008a24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a26:	4b03      	ldr	r3, [pc, #12]	; (8008a34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	200000c8 	.word	0x200000c8

08008a38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	6039      	str	r1, [r7, #0]
 8008a42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	2204      	movs	r2, #4
 8008a48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a4a:	4b03      	ldr	r3, [pc, #12]	; (8008a58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	200000dc 	.word	0x200000dc

08008a5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4603      	mov	r3, r0
 8008a64:	6039      	str	r1, [r7, #0]
 8008a66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d105      	bne.n	8008a7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	4907      	ldr	r1, [pc, #28]	; (8008a90 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a72:	4808      	ldr	r0, [pc, #32]	; (8008a94 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a74:	f7ff fe1e 	bl	80086b4 <USBD_GetString>
 8008a78:	e004      	b.n	8008a84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	4904      	ldr	r1, [pc, #16]	; (8008a90 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a7e:	4805      	ldr	r0, [pc, #20]	; (8008a94 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a80:	f7ff fe18 	bl	80086b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a84:	4b02      	ldr	r3, [pc, #8]	; (8008a90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	200014dc 	.word	0x200014dc
 8008a94:	080092b8 	.word	0x080092b8

08008a98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	6039      	str	r1, [r7, #0]
 8008aa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	4904      	ldr	r1, [pc, #16]	; (8008ab8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008aa8:	4804      	ldr	r0, [pc, #16]	; (8008abc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008aaa:	f7ff fe03 	bl	80086b4 <USBD_GetString>
  return USBD_StrDesc;
 8008aae:	4b02      	ldr	r3, [pc, #8]	; (8008ab8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	200014dc 	.word	0x200014dc
 8008abc:	080092d0 	.word	0x080092d0

08008ac0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	6039      	str	r1, [r7, #0]
 8008aca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	221a      	movs	r2, #26
 8008ad0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ad2:	f000 f843 	bl	8008b5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ad6:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	200000e0 	.word	0x200000e0

08008ae4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	4603      	mov	r3, r0
 8008aec:	6039      	str	r1, [r7, #0]
 8008aee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008af0:	79fb      	ldrb	r3, [r7, #7]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d105      	bne.n	8008b02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	4907      	ldr	r1, [pc, #28]	; (8008b18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008afa:	4808      	ldr	r0, [pc, #32]	; (8008b1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008afc:	f7ff fdda 	bl	80086b4 <USBD_GetString>
 8008b00:	e004      	b.n	8008b0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	4904      	ldr	r1, [pc, #16]	; (8008b18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b06:	4805      	ldr	r0, [pc, #20]	; (8008b1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b08:	f7ff fdd4 	bl	80086b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b0c:	4b02      	ldr	r3, [pc, #8]	; (8008b18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	200014dc 	.word	0x200014dc
 8008b1c:	080092e4 	.word	0x080092e4

08008b20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	6039      	str	r1, [r7, #0]
 8008b2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d105      	bne.n	8008b3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	4907      	ldr	r1, [pc, #28]	; (8008b54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b36:	4808      	ldr	r0, [pc, #32]	; (8008b58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b38:	f7ff fdbc 	bl	80086b4 <USBD_GetString>
 8008b3c:	e004      	b.n	8008b48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	4904      	ldr	r1, [pc, #16]	; (8008b54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b42:	4805      	ldr	r0, [pc, #20]	; (8008b58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b44:	f7ff fdb6 	bl	80086b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b48:	4b02      	ldr	r3, [pc, #8]	; (8008b54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	200014dc 	.word	0x200014dc
 8008b58:	080092f0 	.word	0x080092f0

08008b5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b62:	4b0f      	ldr	r3, [pc, #60]	; (8008ba0 <Get_SerialNum+0x44>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b68:	4b0e      	ldr	r3, [pc, #56]	; (8008ba4 <Get_SerialNum+0x48>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b6e:	4b0e      	ldr	r3, [pc, #56]	; (8008ba8 <Get_SerialNum+0x4c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4413      	add	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d009      	beq.n	8008b96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b82:	2208      	movs	r2, #8
 8008b84:	4909      	ldr	r1, [pc, #36]	; (8008bac <Get_SerialNum+0x50>)
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 f814 	bl	8008bb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b8c:	2204      	movs	r2, #4
 8008b8e:	4908      	ldr	r1, [pc, #32]	; (8008bb0 <Get_SerialNum+0x54>)
 8008b90:	68b8      	ldr	r0, [r7, #8]
 8008b92:	f000 f80f 	bl	8008bb4 <IntToUnicode>
  }
}
 8008b96:	bf00      	nop
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	1fff7a10 	.word	0x1fff7a10
 8008ba4:	1fff7a14 	.word	0x1fff7a14
 8008ba8:	1fff7a18 	.word	0x1fff7a18
 8008bac:	200000e2 	.word	0x200000e2
 8008bb0:	200000f2 	.word	0x200000f2

08008bb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	75fb      	strb	r3, [r7, #23]
 8008bca:	e027      	b.n	8008c1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	0f1b      	lsrs	r3, r3, #28
 8008bd0:	2b09      	cmp	r3, #9
 8008bd2:	d80b      	bhi.n	8008bec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	0f1b      	lsrs	r3, r3, #28
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	7dfb      	ldrb	r3, [r7, #23]
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	4619      	mov	r1, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	440b      	add	r3, r1
 8008be4:	3230      	adds	r2, #48	; 0x30
 8008be6:	b2d2      	uxtb	r2, r2
 8008be8:	701a      	strb	r2, [r3, #0]
 8008bea:	e00a      	b.n	8008c02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	0f1b      	lsrs	r3, r3, #28
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	440b      	add	r3, r1
 8008bfc:	3237      	adds	r2, #55	; 0x37
 8008bfe:	b2d2      	uxtb	r2, r2
 8008c00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	011b      	lsls	r3, r3, #4
 8008c06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	4413      	add	r3, r2
 8008c12:	2200      	movs	r2, #0
 8008c14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	75fb      	strb	r3, [r7, #23]
 8008c1c:	7dfa      	ldrb	r2, [r7, #23]
 8008c1e:	79fb      	ldrb	r3, [r7, #7]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d3d3      	bcc.n	8008bcc <IntToUnicode+0x18>
  }
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop
 8008c28:	371c      	adds	r7, #28
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
	...

08008c34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08a      	sub	sp, #40	; 0x28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c3c:	f107 0314 	add.w	r3, r7, #20
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	605a      	str	r2, [r3, #4]
 8008c46:	609a      	str	r2, [r3, #8]
 8008c48:	60da      	str	r2, [r3, #12]
 8008c4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c54:	d13a      	bne.n	8008ccc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c56:	2300      	movs	r3, #0
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	4b1e      	ldr	r3, [pc, #120]	; (8008cd4 <HAL_PCD_MspInit+0xa0>)
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	4a1d      	ldr	r2, [pc, #116]	; (8008cd4 <HAL_PCD_MspInit+0xa0>)
 8008c60:	f043 0301 	orr.w	r3, r3, #1
 8008c64:	6313      	str	r3, [r2, #48]	; 0x30
 8008c66:	4b1b      	ldr	r3, [pc, #108]	; (8008cd4 <HAL_PCD_MspInit+0xa0>)
 8008c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c80:	2303      	movs	r3, #3
 8008c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c84:	230a      	movs	r3, #10
 8008c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c88:	f107 0314 	add.w	r3, r7, #20
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	4812      	ldr	r0, [pc, #72]	; (8008cd8 <HAL_PCD_MspInit+0xa4>)
 8008c90:	f7f8 f8ce 	bl	8000e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c94:	4b0f      	ldr	r3, [pc, #60]	; (8008cd4 <HAL_PCD_MspInit+0xa0>)
 8008c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c98:	4a0e      	ldr	r2, [pc, #56]	; (8008cd4 <HAL_PCD_MspInit+0xa0>)
 8008c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9e:	6353      	str	r3, [r2, #52]	; 0x34
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <HAL_PCD_MspInit+0xa0>)
 8008ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca8:	4a0a      	ldr	r2, [pc, #40]	; (8008cd4 <HAL_PCD_MspInit+0xa0>)
 8008caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cae:	6453      	str	r3, [r2, #68]	; 0x44
 8008cb0:	4b08      	ldr	r3, [pc, #32]	; (8008cd4 <HAL_PCD_MspInit+0xa0>)
 8008cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cb8:	60fb      	str	r3, [r7, #12]
 8008cba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	2043      	movs	r0, #67	; 0x43
 8008cc2:	f7f8 f84e 	bl	8000d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008cc6:	2043      	movs	r0, #67	; 0x43
 8008cc8:	f7f8 f867 	bl	8000d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ccc:	bf00      	nop
 8008cce:	3728      	adds	r7, #40	; 0x28
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	40023800 	.word	0x40023800
 8008cd8:	40020000 	.word	0x40020000

08008cdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	f7fe fb7f 	bl	80073f6 <USBD_LL_SetupStage>
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008d12:	78fa      	ldrb	r2, [r7, #3]
 8008d14:	6879      	ldr	r1, [r7, #4]
 8008d16:	4613      	mov	r3, r2
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	4413      	add	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	440b      	add	r3, r1
 8008d20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	78fb      	ldrb	r3, [r7, #3]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	f7fe fbb9 	bl	80074a0 <USBD_LL_DataOutStage>
}
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008d48:	78fa      	ldrb	r2, [r7, #3]
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	4413      	add	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	440b      	add	r3, r1
 8008d56:	334c      	adds	r3, #76	; 0x4c
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	f7fe fc52 	bl	8007606 <USBD_LL_DataInStage>
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fe fd86 	bl	800788a <USBD_LL_SOF>
}
 8008d7e:	bf00      	nop
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d001      	beq.n	8008d9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d9a:	f7f7 fd07 	bl	80007ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008da4:	7bfa      	ldrb	r2, [r7, #15]
 8008da6:	4611      	mov	r1, r2
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe fd30 	bl	800780e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe fcd8 	bl	800776a <USBD_LL_Reset>
}
 8008dba:	bf00      	nop
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe fd2b 	bl	800782e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	6812      	ldr	r2, [r2, #0]
 8008de6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008dea:	f043 0301 	orr.w	r3, r3, #1
 8008dee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d005      	beq.n	8008e04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008df8:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <HAL_PCD_SuspendCallback+0x48>)
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	4a03      	ldr	r2, [pc, #12]	; (8008e0c <HAL_PCD_SuspendCallback+0x48>)
 8008dfe:	f043 0306 	orr.w	r3, r3, #6
 8008e02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	e000ed00 	.word	0xe000ed00

08008e10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fe fd1b 	bl	800785a <USBD_LL_Resume>
}
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e3e:	78fa      	ldrb	r2, [r7, #3]
 8008e40:	4611      	mov	r1, r2
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fe fd73 	bl	800792e <USBD_LL_IsoOUTIncomplete>
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e62:	78fa      	ldrb	r2, [r7, #3]
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe fd2f 	bl	80078ca <USBD_LL_IsoINIncomplete>
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fd85 	bl	8007992 <USBD_LL_DevConnected>
}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe fd82 	bl	80079a8 <USBD_LL_DevDisconnected>
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d13c      	bne.n	8008f36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ebc:	4a20      	ldr	r2, [pc, #128]	; (8008f40 <USBD_LL_Init+0x94>)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a1e      	ldr	r2, [pc, #120]	; (8008f40 <USBD_LL_Init+0x94>)
 8008ec8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ecc:	4b1c      	ldr	r3, [pc, #112]	; (8008f40 <USBD_LL_Init+0x94>)
 8008ece:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ed2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ed4:	4b1a      	ldr	r3, [pc, #104]	; (8008f40 <USBD_LL_Init+0x94>)
 8008ed6:	2204      	movs	r2, #4
 8008ed8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008eda:	4b19      	ldr	r3, [pc, #100]	; (8008f40 <USBD_LL_Init+0x94>)
 8008edc:	2202      	movs	r2, #2
 8008ede:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ee0:	4b17      	ldr	r3, [pc, #92]	; (8008f40 <USBD_LL_Init+0x94>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ee6:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <USBD_LL_Init+0x94>)
 8008ee8:	2202      	movs	r2, #2
 8008eea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008eec:	4b14      	ldr	r3, [pc, #80]	; (8008f40 <USBD_LL_Init+0x94>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ef2:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <USBD_LL_Init+0x94>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ef8:	4b11      	ldr	r3, [pc, #68]	; (8008f40 <USBD_LL_Init+0x94>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008efe:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <USBD_LL_Init+0x94>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f04:	4b0e      	ldr	r3, [pc, #56]	; (8008f40 <USBD_LL_Init+0x94>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f0a:	480d      	ldr	r0, [pc, #52]	; (8008f40 <USBD_LL_Init+0x94>)
 8008f0c:	f7f9 fe3b 	bl	8002b86 <HAL_PCD_Init>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f16:	f7f7 fc49 	bl	80007ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f1a:	2180      	movs	r1, #128	; 0x80
 8008f1c:	4808      	ldr	r0, [pc, #32]	; (8008f40 <USBD_LL_Init+0x94>)
 8008f1e:	f7fb f892 	bl	8004046 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f22:	2240      	movs	r2, #64	; 0x40
 8008f24:	2100      	movs	r1, #0
 8008f26:	4806      	ldr	r0, [pc, #24]	; (8008f40 <USBD_LL_Init+0x94>)
 8008f28:	f7fb f846 	bl	8003fb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f2c:	2280      	movs	r2, #128	; 0x80
 8008f2e:	2101      	movs	r1, #1
 8008f30:	4803      	ldr	r0, [pc, #12]	; (8008f40 <USBD_LL_Init+0x94>)
 8008f32:	f7fb f841 	bl	8003fb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	200016dc 	.word	0x200016dc

08008f44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7f9 ff30 	bl	8002dc0 <HAL_PCD_Start>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 f942 	bl	80091f0 <USBD_Get_USB_Status>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	4608      	mov	r0, r1
 8008f84:	4611      	mov	r1, r2
 8008f86:	461a      	mov	r2, r3
 8008f88:	4603      	mov	r3, r0
 8008f8a:	70fb      	strb	r3, [r7, #3]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70bb      	strb	r3, [r7, #2]
 8008f90:	4613      	mov	r3, r2
 8008f92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008fa2:	78bb      	ldrb	r3, [r7, #2]
 8008fa4:	883a      	ldrh	r2, [r7, #0]
 8008fa6:	78f9      	ldrb	r1, [r7, #3]
 8008fa8:	f7fa fc01 	bl	80037ae <HAL_PCD_EP_Open>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 f91c 	bl	80091f0 <USBD_Get_USB_Status>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fe0:	78fa      	ldrb	r2, [r7, #3]
 8008fe2:	4611      	mov	r1, r2
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fa fc4a 	bl	800387e <HAL_PCD_EP_Close>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 f8fd 	bl	80091f0 <USBD_Get_USB_Status>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800901e:	78fa      	ldrb	r2, [r7, #3]
 8009020:	4611      	mov	r1, r2
 8009022:	4618      	mov	r0, r3
 8009024:	f7fa fd22 	bl	8003a6c <HAL_PCD_EP_SetStall>
 8009028:	4603      	mov	r3, r0
 800902a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	4618      	mov	r0, r3
 8009030:	f000 f8de 	bl	80091f0 <USBD_Get_USB_Status>
 8009034:	4603      	mov	r3, r0
 8009036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009038:	7bbb      	ldrb	r3, [r7, #14]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	460b      	mov	r3, r1
 800904c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800905c:	78fa      	ldrb	r2, [r7, #3]
 800905e:	4611      	mov	r1, r2
 8009060:	4618      	mov	r0, r3
 8009062:	f7fa fd67 	bl	8003b34 <HAL_PCD_EP_ClrStall>
 8009066:	4603      	mov	r3, r0
 8009068:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800906a:	7bfb      	ldrb	r3, [r7, #15]
 800906c:	4618      	mov	r0, r3
 800906e:	f000 f8bf 	bl	80091f0 <USBD_Get_USB_Status>
 8009072:	4603      	mov	r3, r0
 8009074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009076:	7bbb      	ldrb	r3, [r7, #14]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009092:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009098:	2b00      	cmp	r3, #0
 800909a:	da0b      	bge.n	80090b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800909c:	78fb      	ldrb	r3, [r7, #3]
 800909e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090a2:	68f9      	ldr	r1, [r7, #12]
 80090a4:	4613      	mov	r3, r2
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	440b      	add	r3, r1
 80090ae:	333e      	adds	r3, #62	; 0x3e
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	e00b      	b.n	80090cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090b4:	78fb      	ldrb	r3, [r7, #3]
 80090b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090ba:	68f9      	ldr	r1, [r7, #12]
 80090bc:	4613      	mov	r3, r2
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	4413      	add	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	440b      	add	r3, r1
 80090c6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80090ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090f2:	78fa      	ldrb	r2, [r7, #3]
 80090f4:	4611      	mov	r1, r2
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fa fb34 	bl	8003764 <HAL_PCD_SetAddress>
 80090fc:	4603      	mov	r3, r0
 80090fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	4618      	mov	r0, r3
 8009104:	f000 f874 	bl	80091f0 <USBD_Get_USB_Status>
 8009108:	4603      	mov	r3, r0
 800910a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800910c:	7bbb      	ldrb	r3, [r7, #14]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b086      	sub	sp, #24
 800911a:	af00      	add	r7, sp, #0
 800911c:	60f8      	str	r0, [r7, #12]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	603b      	str	r3, [r7, #0]
 8009122:	460b      	mov	r3, r1
 8009124:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009134:	7af9      	ldrb	r1, [r7, #11]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	f7fa fc4d 	bl	80039d8 <HAL_PCD_EP_Transmit>
 800913e:	4603      	mov	r3, r0
 8009140:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009142:	7dfb      	ldrb	r3, [r7, #23]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 f853 	bl	80091f0 <USBD_Get_USB_Status>
 800914a:	4603      	mov	r3, r0
 800914c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800914e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	607a      	str	r2, [r7, #4]
 8009162:	603b      	str	r3, [r7, #0]
 8009164:	460b      	mov	r3, r1
 8009166:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009176:	7af9      	ldrb	r1, [r7, #11]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	f7fa fbc9 	bl	8003912 <HAL_PCD_EP_Receive>
 8009180:	4603      	mov	r3, r0
 8009182:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009184:	7dfb      	ldrb	r3, [r7, #23]
 8009186:	4618      	mov	r0, r3
 8009188:	f000 f832 	bl	80091f0 <USBD_Get_USB_Status>
 800918c:	4603      	mov	r3, r0
 800918e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009190:	7dbb      	ldrb	r3, [r7, #22]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b082      	sub	sp, #8
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	460b      	mov	r3, r1
 80091a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091ac:	78fa      	ldrb	r2, [r7, #3]
 80091ae:	4611      	mov	r1, r2
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fa fbf9 	bl	80039a8 <HAL_PCD_EP_GetRxCount>
 80091b6:	4603      	mov	r3, r0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80091c8:	4b03      	ldr	r3, [pc, #12]	; (80091d8 <USBD_static_malloc+0x18>)
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	20001be8 	.word	0x20001be8

080091dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]

}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	4603      	mov	r3, r0
 80091f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	2b03      	cmp	r3, #3
 8009202:	d817      	bhi.n	8009234 <USBD_Get_USB_Status+0x44>
 8009204:	a201      	add	r2, pc, #4	; (adr r2, 800920c <USBD_Get_USB_Status+0x1c>)
 8009206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920a:	bf00      	nop
 800920c:	0800921d 	.word	0x0800921d
 8009210:	08009223 	.word	0x08009223
 8009214:	08009229 	.word	0x08009229
 8009218:	0800922f 	.word	0x0800922f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	73fb      	strb	r3, [r7, #15]
    break;
 8009220:	e00b      	b.n	800923a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009222:	2303      	movs	r3, #3
 8009224:	73fb      	strb	r3, [r7, #15]
    break;
 8009226:	e008      	b.n	800923a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009228:	2301      	movs	r3, #1
 800922a:	73fb      	strb	r3, [r7, #15]
    break;
 800922c:	e005      	b.n	800923a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800922e:	2303      	movs	r3, #3
 8009230:	73fb      	strb	r3, [r7, #15]
    break;
 8009232:	e002      	b.n	800923a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009234:	2303      	movs	r3, #3
 8009236:	73fb      	strb	r3, [r7, #15]
    break;
 8009238:	bf00      	nop
  }
  return usb_status;
 800923a:	7bfb      	ldrb	r3, [r7, #15]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <memset>:
 8009248:	4402      	add	r2, r0
 800924a:	4603      	mov	r3, r0
 800924c:	4293      	cmp	r3, r2
 800924e:	d100      	bne.n	8009252 <memset+0xa>
 8009250:	4770      	bx	lr
 8009252:	f803 1b01 	strb.w	r1, [r3], #1
 8009256:	e7f9      	b.n	800924c <memset+0x4>

08009258 <__libc_init_array>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	4d0d      	ldr	r5, [pc, #52]	; (8009290 <__libc_init_array+0x38>)
 800925c:	4c0d      	ldr	r4, [pc, #52]	; (8009294 <__libc_init_array+0x3c>)
 800925e:	1b64      	subs	r4, r4, r5
 8009260:	10a4      	asrs	r4, r4, #2
 8009262:	2600      	movs	r6, #0
 8009264:	42a6      	cmp	r6, r4
 8009266:	d109      	bne.n	800927c <__libc_init_array+0x24>
 8009268:	4d0b      	ldr	r5, [pc, #44]	; (8009298 <__libc_init_array+0x40>)
 800926a:	4c0c      	ldr	r4, [pc, #48]	; (800929c <__libc_init_array+0x44>)
 800926c:	f000 f818 	bl	80092a0 <_init>
 8009270:	1b64      	subs	r4, r4, r5
 8009272:	10a4      	asrs	r4, r4, #2
 8009274:	2600      	movs	r6, #0
 8009276:	42a6      	cmp	r6, r4
 8009278:	d105      	bne.n	8009286 <__libc_init_array+0x2e>
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009280:	4798      	blx	r3
 8009282:	3601      	adds	r6, #1
 8009284:	e7ee      	b.n	8009264 <__libc_init_array+0xc>
 8009286:	f855 3b04 	ldr.w	r3, [r5], #4
 800928a:	4798      	blx	r3
 800928c:	3601      	adds	r6, #1
 800928e:	e7f2      	b.n	8009276 <__libc_init_array+0x1e>
 8009290:	08009320 	.word	0x08009320
 8009294:	08009320 	.word	0x08009320
 8009298:	08009320 	.word	0x08009320
 800929c:	08009324 	.word	0x08009324

080092a0 <_init>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	bf00      	nop
 80092a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a6:	bc08      	pop	{r3}
 80092a8:	469e      	mov	lr, r3
 80092aa:	4770      	bx	lr

080092ac <_fini>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	bf00      	nop
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr
